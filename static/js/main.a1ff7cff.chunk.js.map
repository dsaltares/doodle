{"version":3,"sources":["store/socket/index.ts","components/MainContent/MainContent.styles.ts","components/MainContent/MainContent.tsx","components/Emoji/Emoji.tsx","components/Menu/Menu.styles.ts","components/HowToPlay/InstructionListItem.tsx","components/HowToPlay/InstructionList.tsx","components/HowToPlay/HowToPlayDialog.tsx","components/HowToPlay/HowToPlayPanel.tsx","components/Menu/Menu.tsx","store/game/selectors.ts","store/game/index.ts","components/Menu/Menu.container.ts","components/Connecting/Connecting.styles.ts","components/Connecting/Connecting.tsx","components/Connecting/Connecting.container.ts","components/WaitingToJoin/WaitingToJoin.tsx","components/InitialPhase/InitialPhase.styles.ts","utils/pluralize.ts","components/InitialPhase/InitialPhase.tsx","components/InitialPhase/InitialPhase.container.ts","store/game/constants.ts","components/ConceptListItem/ConceptListItem.tsx","components/ConceptChoicePhase/ConceptChoicePhase.tsx","components/ConceptChoicePhase/ConceptChoicePhase.container.ts","components/ToolBarButton/ToolBarButton.styles.ts","components/ToolBarButton/ToolBarButton.tsx","components/ExpandableToolBarButton/ExpandableToolBarButton.styles.ts","components/ExpandableToolBarButton/ExpandableToolBarButton.tsx","components/LineWidthPickerButton/LineWidthPickerButton.styles.ts","components/LineWidthPickerButton/LineWidthPickerButton.tsx","components/ColorPickerButton/Colors.ts","components/ColorPickerButton/ColorPickerButton.tsx","components/ToolPickerButton/eraser.svg","components/ToolPickerButton/ToolPickerButton.tsx","components/ToolBar/ToolBar.tsx","components/Editor/Editor.styled.ts","components/Editor/Editor.tsx","components/DrawPhase/DrawPhase.tsx","components/DrawPhase/DrawPhase.container.ts","components/GuessPhase/GuessPhase.styles.ts","components/GuessPhase/GuessPhase.tsx","components/GuessPhase/GuessPhase.container.ts","components/CreateEntryPhase/CreateEntryPhase.tsx","components/CreateEntryPhase/CreateEntryPhase.container.ts","components/EntryCard/EntryCard.styles.ts","components/EntryCard/EntryCard.tsx","components/DoodleEntryCard/DoodleEntryCard.tsx","components/DoodleEntryCard/DoodleEntryCard.container.ts","components/ConceptEntryCard/ConceptEntryCard.tsx","components/ConceptEntryCard/ConceptEntryCard.container.ts","components/EntryChoicePhase/EntryChoicePhase.styles.ts","components/EntryChoicePhase/EntryChoiceAcknowledge.tsx","components/EntryChoicePhase/EntryChoiceList.tsx","components/EntryChoicePhase/EntryChoicePhase.tsx","components/EntryChoicePhase/EntryChoicePhase.container.ts","components/Game/Game.tsx","components/Game/Game.container.ts","components/JoinMenu/JoinMenu.tsx","components/JoinMenu/JoinMenu.container.ts","components/TopBar/TopBar.styles.ts","components/TopBarTitle/TopBarTitle.tsx","components/TopBarLinks/TopBarLinks.styles.ts","components/TopBarLinks/github.svg","components/TopBarLinks/TopBarLinks.tsx","components/TopBarLinks/TopBarLinks.container.ts","components/TopBar/TopBar.tsx","components/SideBar/SideBar.styles.ts","components/PlayerListItem/PlayerListItem.styles.ts","components/PlayerListItem/PlayerListItem.tsx","components/PlayerListItem/PlayerListItem.container.ts","components/PlayerList/PlayerList.styles.ts","components/PlayerList/PlayerList.tsx","components/PlayerList/PlayerList.container.ts","components/PlayerList/WaitingPlayerList.tsx","components/PlayerList/WaitingPlayerList.container.ts","components/SideBar/SideBar.tsx","components/App/App.styles.ts","utils/useMountEffect.ts","components/App/App.tsx","components/App/App.container.ts","store/endpoints.ts","store/reducers.ts","store/index.ts","index.tsx"],"names":["socket","useStyles","makeStyles","theme","paper","props","padding","spacing","maxWidth","width","MainContent","children","classes","Grid","item","xs","Paper","variant","className","container","direction","Emoji","symbol","label","role","aria-label","aria-hidden","buttonGroup","flex","button","InstructionListItem","emoji","text","divider","ListItem","ListItemAvatar","Typography","ListItemText","primary","Instructions","InstructionList","List","map","step","index","key","length","HowToPlayDialog","open","onClose","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","aria-labelledby","DialogTitle","id","justify","alignItems","IconButton","onClick","DialogContent","HowToPlayPanel","withRouter","startGame","history","useState","mode","setMode","name","setName","code","setCode","hasName","hasGameCode","canStartGame","codeField","TextField","onChange","event","target","value","fullWidth","onSubmit","preventDefault","goToGame","push","ToggleButtonGroup","_event","newMode","exclusive","ToggleButton","Button","type","color","disabled","socketSlice","createSlice","initialState","status","hasError","reducers","connectToSocketStarted","state","connectToSocketSuccess","connectToSocketFailed","disconnected","actions","reducer","socketDeferred","defer","playerIds","game","gameState","Object","keys","players","waitingPlayerIds","waitingPlayers","player","isWaiting","isFirstCreateTurn","phase","round","currentStackForPlayer","playerId","playerIdx","order","indexOf","numPlayers","playerIdxMinusTurn","sourceIdx","sourcePlayerId","stacks","getSourceEntry","entries","getPlayerSourceEntry","currentConcept","concepts","data","concept","currentDrawing","drawing","sourceEntryAuthor","entry","author","playerHasSubmitted","stack","hasSubmitted","submittedEntry","config","startingGame","choosingConcept","undefined","acknowledgedWinner","alerts","gameSlice","setPlayerName","action","payload","setGamePlayer","leaveGame","chosenEntry","chooseConcept","submitEntry","chooseEntry","acknowledgeWinner","updateGame","updateBy","alert","hasAlert","forCurrentPlayer","ignorePlayers","includes","lastUpdate","dismissAlert","shift","joinGame","dispatch","a","connect","uuid","createGame","Menu","Connecting","severity","message","Alert","icon","CircularProgress","WaitingToJoin","buttonContainer","paddingTop","pluralize","singular","plural","count","InitialPhase","createdGame","creatorName","missingPlayers","onStart","gameFull","gameUrl","startButton","alertOpen","setAlertOpen","handleAlertClosed","copy","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","createdBy","location","window","Math","max","protocol","host","promise","emit","ConceptListItem","selected","ConceptChoicePhase","selectedConcept","onChooseConcept","choices","root","borderRadius","ToolBarButton","title","Tooltip","placement","ExpandableToolBarButton","renderContent","anchorEl","setAnchorEl","handleClose","Boolean","Fragment","currentTarget","Popover","transformOrigin","close","height","marginTop","valueText","LineWidthPickerButton","lineWidth","onLineWidthChange","handleChange","_e","newValue","Array","isArray","Slider","getAriaValueText","valueLabelDisplay","min","ColorPickerButton","Colors","onColorChange","style","colors","onChangeComplete","hex","handleOnChangeComplete","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","x","y","_ref","svgRef","preserveAspectRatio","viewBox","msTransform","WebkitTransform","transform","ref","ForwardRef","forwardRef","getIconForTool","tool","SvgIcon","ToolPickerButton","onToolChange","newTool","ToolBar","canUndo","onUndo","canRedo","onRedo","onEraseAll","SketchField","styled","SketchFieldBase","border","Editor","sketch","bind","onSketchChange","setState","undo","redo","clear","canUndoNow","canRedoNow","toDataURL","editorColor","lineColor","React","Component","DrawPhase","firstCreateTurn","submitted","conceptFrom","editorRef","createRef","editor","current","image","export","selectors","submitDrawing","GuessPhase","guess","setGuess","src","alt","submitConcept","CreateEntryPhase","avatar","backgroundColor","marginRight","EntryCard","content","CardHeader","Avatar","avatarStyle","topType","accessoriesType","hairColor","facialHairType","clotheType","clotheColor","eyeType","eyebrowType","mouthType","skinColor","wrapped","CardActionArea","DoodleEntryCard","CardMedia","component","ownProps","ConceptEntryCard","CardContent","entryPaper","selectedEntry","borderWidth","borderColor","palette","main","choicesContainer","img","EntryChoiceAcknowledge","winningEntry","stackPlayerName","currentPlayerChose","chosenPlayerName","acknowledged","onAcknowledge","entryCard","nextButton","elevation","EntryChoiceList","currentPlayerChooses","onChooseEntry","drawingEntry","otherEntries","slice","EntryChoicePhase","chosenPlayerId","find","stackPlayerId","chosen","acknowledgedBy","targetPlayer","Game","unblock","onBeforeUnload","e","returnValue","addEventListener","block","removeEventListener","leave","connected","phaseName","waitingToJoin","alertComponent","renderAlert","_dispatch","getState","useParams","handleGoClicked","params","JoinMenu","appBar","zIndex","drawer","drawerButton","up","display","TopBarTitle","Hidden","smUp","implementation","noWrap","xsDown","iconButton","TopBarLinks","gameStarted","helpOpen","setHelpOpen","howToPlay","startIcon","url","href","TopBar","onToggleDrawer","AppBar","position","Toolbar","edge","flexShrink","drawerPaper","drawerContainer","overflow","statusEmojis","Ready","Looking","Thinking","Guessing","Drawing","PlayerItem","points","secondary","ListItemSecondaryAction","getPlayerState","createdByCurrentPlayer","choicePhase","isPlayerTurn","alreadyChosen","PlayerListItem","PlayerSkeleton","Skeleton","PlayerList","visible","minPlayers","maxPlayers","remainingPlayers","skeletons","from","subheader","ListSubheader","WaitingPlayerList","SideBar","drawerOpen","Drawer","ModalProps","keepMounted","flexGrow","useMountEffect","fn","useEffect","App","playerName","setDrawerOpen","exact","path","subscribe","on","console","log","io","resolve","forEach","rootReducer","combineReducers","store","configureStore","devTools","process","ReactDOM","render","CssBaseline","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1ff7cff.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport io from 'socket.io-client';\nimport defer from 'p-defer';\nimport { AppDispatch } from '..';\nimport { SocketState } from './types';\nimport { LIVE_SERVER_SOCKET } from '../endpoints';\n\nconst initialState: SocketState = {\n  status: 'disconnected',\n  hasError: false,\n};\n\nconst socketSlice = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    connectToSocketStarted: (state): void => {\n      state.status = 'connecting';\n    },\n    connectToSocketSuccess: (state): void => {\n      state.status = 'connected';\n      state.hasError = false;\n    },\n    connectToSocketFailed: (state): void => {\n      state.status = 'error';\n      state.hasError = true;\n    },\n    disconnected: (state): void => {\n      state.status = 'disconnected';\n      state.hasError = true;\n    },\n  },\n});\n\nconst { actions, reducer } = socketSlice;\n\nexport default reducer;\n\nexport let socket: SocketIOClient.Socket;\n\nexport const socketDeferred = defer<SocketIOClient.Socket>();\n\nexport const connect = (\n  subscribe: (socket: SocketIOClient.Socket) => void\n) => async (dispatch: AppDispatch): Promise<void> => {\n  dispatch(actions.connectToSocketStarted());\n\n  socket = io(LIVE_SERVER_SOCKET);\n  socketDeferred.resolve(socket);\n\n  const successEvents = ['connect', 'reconnect'];\n  successEvents.forEach((event) => {\n    socket.on(event, () => {\n      dispatch(actions.connectToSocketSuccess());\n      subscribe(socket);\n    });\n  });\n\n  const errorEvents = [\n    'connect_error',\n    'connect_timeout',\n    'error',\n    'disconnected',\n  ];\n  errorEvents.forEach((event) => {\n    socket.on(event, () => {\n      dispatch(actions.connectToSocketFailed());\n    });\n  });\n\n  socket.on('reconnecting', () => {\n    dispatch(actions.connectToSocketStarted());\n  });\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\ntype PaperProps = {\n  width: number;\n};\n\ntype PaperStyle = {\n  padding: number;\n  maxWidth: number;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: (props: PaperProps): PaperStyle => ({\n    padding: theme.spacing(3),\n    maxWidth: props.width,\n  }),\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport useStyles from './MainContent.styles';\n\ntype Props = {\n  width?: number;\n};\n\nconst MainContent: FunctionComponent<Props> = ({ children, width = 500 }) => {\n  const classes = useStyles({ width });\n\n  return (\n    <Grid item xs={12}>\n      <Paper variant=\"outlined\" className={classes.paper}>\n        <Grid container direction=\"column\" spacing={2}>\n          {children}\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default MainContent;\n","import React, { FunctionComponent } from 'react';\n\ntype Props = {\n  symbol: string;\n  label?: string;\n  className?: string;\n};\n\nconst Emoji: FunctionComponent<Props> = ({ symbol, label, className }) => (\n  <span\n    className={className}\n    role=\"img\"\n    aria-label={label}\n    aria-hidden={label ? 'false' : 'true'}\n  >\n    {symbol}\n  </span>\n);\n\nexport default Emoji;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  buttonGroup: {\n    flex: 1,\n  },\n  button: {\n    flex: 1,\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nimport Emoji from '../Emoji';\n\ntype Props = {\n  emoji: string;\n  text: string;\n  divider: boolean;\n};\n\nconst InstructionListItem: FunctionComponent<Props> = ({\n  emoji,\n  text,\n  divider,\n}) => (\n  <ListItem divider={divider}>\n    <ListItemAvatar>\n      <Typography variant=\"h4\">\n        <Emoji symbol={emoji} />\n      </Typography>\n    </ListItemAvatar>\n    <ListItemText primary={text} />\n  </ListItem>\n);\n\nexport default InstructionListItem;\n","import React, { FunctionComponent } from 'react';\nimport List from '@material-ui/core/List';\n\nimport InstructionListItem from './InstructionListItem';\n\nconst Instructions = [\n  {\n    emoji: '🎮',\n    text: 'Create a game.',\n  },\n  {\n    emoji: '🔗',\n    text:\n      'Share the link with friends. Remember, Doodle is best played on a video call!',\n  },\n  {\n    emoji: '🤫',\n    text: 'Every player chooses a concept. But keep it secret!',\n  },\n  {\n    emoji: '✏️',\n    text:\n      \"Draw your concept. Don't know how to draw? Worry not, the worse you draw, the more fun the round will be!\",\n  },\n  {\n    emoji: '🤔',\n    text: 'Now guess what another player drew.',\n  },\n  {\n    emoji: '✏️',\n    text: 'Time to draw what another player guessed!',\n  },\n  {\n    emoji: '🙌',\n    text:\n      'When the round is done, each player chooses their favourite entry for their concept.',\n  },\n];\n\nconst InstructionList: FunctionComponent = () => (\n  <List>\n    {Instructions.map((step, index) => (\n      <InstructionListItem\n        key={index}\n        emoji={step.emoji}\n        text={step.text}\n        divider={index < Instructions.length - 1}\n      />\n    ))}\n  </List>\n);\n\nexport default InstructionList;\n","import React, { FunctionComponent } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\nimport InstructionList from './InstructionList';\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n};\n\nconst HowToPlayDialog: FunctionComponent<Props> = ({ open, onClose }) => {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"how-to-play-dialog\"\n    >\n      <DialogTitle id=\"how-to-play-dialog\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Grid item>How to play</Grid>\n          <Grid item>\n            <IconButton onClick={onClose}>\n              <CloseIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </DialogTitle>\n      <DialogContent>\n        <InstructionList />\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default HowToPlayDialog;\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport MainContent from '../MainContent';\nimport InstructionList from './InstructionList';\n\nconst HowToPlayPanel: FunctionComponent = () => (\n  <MainContent>\n    <Grid item>\n      <Typography variant=\"h5\">How to play</Typography>\n    </Grid>\n    <Grid item>\n      <InstructionList />\n    </Grid>\n  </MainContent>\n);\n\nexport default HowToPlayPanel;\n","import React, { useState, FunctionComponent, FormEvent } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport MainContent from '../MainContent';\nimport Emoji from '../Emoji';\nimport useStyles from './Menu.styles';\nimport { HowToPlayPanel } from '../HowToPlay';\n\nexport type GameMode = 'newGame' | 'joinGame';\n\nexport type StartGameParams = {\n  mode: GameMode;\n  name: string;\n  code: string;\n  goToGame: (code: string) => void;\n};\n\nexport type DispatchProps = {\n  startGame: (params: StartGameParams) => void;\n};\n\ntype Props = RouteComponentProps<{}> & DispatchProps;\n\nconst Menu: FunctionComponent<Props> = ({ startGame, history }) => {\n  const classes = useStyles();\n\n  const [mode, setMode] = useState('newGame');\n  const handleModeChange = (_event: unknown, newMode: string): void => {\n    setMode(newMode);\n  };\n\n  const [name, setName] = useState('');\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void =>\n    setName(event.target.value);\n\n  const [code, setCode] = useState('');\n  const handleGameCodeChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setCode(event.target.value);\n  };\n\n  const hasName = name.length > 0;\n  const hasGameCode = code.length > 0;\n  const canStartGame = hasName && (mode === 'newGame' || hasGameCode);\n\n  const handleGoClicked = (event: FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (canStartGame) {\n      startGame({\n        mode: mode as GameMode,\n        name,\n        code,\n        goToGame: (code: string) => history.push(`/game/${code}`),\n      });\n    }\n  };\n\n  const codeField =\n    mode === 'joinGame' ? (\n      <Grid item xs={12}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Game code\"\n          onChange={handleGameCodeChange}\n          fullWidth\n        />\n      </Grid>\n    ) : null;\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n      <Grid item>\n        <MainContent>\n          <form onSubmit={handleGoClicked}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Grid container direction=\"row\" justify=\"center\">\n                  <ToggleButtonGroup\n                    value={mode}\n                    onChange={handleModeChange}\n                    exclusive\n                    aria-label=\"game mode\"\n                    className={classes.buttonGroup}\n                  >\n                    <ToggleButton value=\"newGame\" className={classes.button}>\n                      <Emoji symbol=\"✏️\" />\n                      <span> New Game</span>\n                    </ToggleButton>\n                    <ToggleButton value=\"joinGame\" className={classes.button}>\n                      <Emoji symbol=\"👥\" />\n                      <span> Join Game</span>\n                    </ToggleButton>\n                  </ToggleButtonGroup>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Player name\"\n                  value={name}\n                  onChange={handleNameChange}\n                  fullWidth\n                />\n              </Grid>\n              {codeField}\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!canStartGame}\n                >\n                  <Emoji symbol=\"🙌\" />\n                  <span>Go!</span>\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </MainContent>\n      </Grid>\n      <Grid item>\n        <HowToPlayPanel />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withRouter(Menu);\n","import { RootState } from '../reducers';\nimport {\n  Player,\n  CreateEntryPhase,\n  Stack,\n  Entry,\n  ConceptEntry,\n  DrawingEntry,\n} from './types';\n\nexport const playerIds = (state: RootState): string[] => {\n  if (!state.game.gameState) {\n    return [];\n  }\n  return Object.keys(state.game.gameState.players);\n};\n\nexport const waitingPlayerIds = (state: RootState): string[] => {\n  if (!state.game.gameState) {\n    return [];\n  }\n  return Object.keys(state.game.gameState.waitingPlayers);\n};\n\nexport const player = (state: RootState, id: string): Player | null => {\n  const game = state.game.gameState;\n  if (!game) {\n    return null;\n  }\n  return game.players[id] || game.waitingPlayers[id];\n};\n\nexport const isWaiting = (state: RootState, id: string): boolean => {\n  const game = state.game.gameState;\n  if (!game) {\n    return false;\n  }\n  return !!game.waitingPlayers[id];\n};\n\nexport const isFirstCreateTurn = (state: RootState): boolean => {\n  const game = state.game.gameState;\n  if (!game) {\n    return false;\n  }\n  const phase = game.round.phase;\n  if (phase.name !== 'createEntry') {\n    return false;\n  }\n  return phase.index === 0;\n};\n\nconst currentStackForPlayer = (\n  state: RootState,\n  playerId: string\n): Stack | undefined => {\n  const game = state.game.gameState;\n  if (!game || game.round.phase.name !== 'createEntry') {\n    return;\n  }\n\n  const phase = game.round.phase as CreateEntryPhase;\n  const playerIdx = game.round.order.indexOf(playerId);\n  const numPlayers = Object.keys(game.players).length;\n  const playerIdxMinusTurn = playerIdx - phase.index;\n  const sourceIdx =\n    playerIdxMinusTurn < 0\n      ? numPlayers + playerIdxMinusTurn\n      : playerIdxMinusTurn;\n  const sourcePlayerId = game.round.order[sourceIdx];\n  return game.round.stacks[sourcePlayerId];\n};\n\nconst getPlayerSourceEntry = (\n  state: RootState,\n  playerId: string\n): Entry | undefined => {\n  const game = state.game.gameState;\n  if (!game || game.round.phase.name !== 'createEntry') {\n    return;\n  }\n\n  const phase = game.round.phase as CreateEntryPhase;\n  const stack = currentStackForPlayer(state, playerId) as Stack;\n  const lastEntry = stack.entries[phase.index - 1];\n  return lastEntry;\n};\n\nexport const getSourceEntry = (state: RootState): Entry | undefined => {\n  const playerId = state.game.player as string;\n  return getPlayerSourceEntry(state, playerId);\n};\n\nexport const currentConcept = (state: RootState): string | undefined => {\n  if (isFirstCreateTurn(state)) {\n    const game = state.game.gameState;\n    const playerId = state.game.player;\n    if (!game || !playerId) {\n      return;\n    }\n\n    return game.round.concepts[playerId];\n  }\n\n  const entry = getSourceEntry(state) as Entry;\n  const conceptEntry = entry.data as ConceptEntry;\n  return conceptEntry.concept;\n};\n\nexport const currentDrawing = (state: RootState): string | undefined => {\n  const entry = getSourceEntry(state) as Entry;\n  const drawingEntry = entry.data as DrawingEntry;\n  return drawingEntry.drawing;\n};\n\nexport const sourceEntryAuthor = (state: RootState): string | undefined => {\n  if (isFirstCreateTurn(state)) {\n    const game = state.game.gameState;\n    const playerId = state.game.player;\n    if (!game || !playerId) {\n      return;\n    }\n\n    return game.players[playerId].name;\n  }\n\n  const entry = getSourceEntry(state) as Entry;\n  const author = player(state, entry.author);\n  return author?.name;\n};\n\nexport const playerHasSubmitted = (\n  state: RootState,\n  playerId: string\n): boolean => {\n  const game = state.game.gameState;\n  if (!game || game.round.phase.name !== 'createEntry') {\n    return false;\n  }\n\n  const stack = currentStackForPlayer(state, playerId) as Stack;\n  const entry = stack.entries[stack.entries.length - 1];\n  return !!entry && entry.author === playerId;\n};\n\nexport const hasSubmitted = (state: RootState): boolean => {\n  if (state.game.submittedEntry) {\n    return true;\n  }\n\n  const game = state.game.gameState;\n  if (!game || game.round.phase.name !== 'createEntry') {\n    return false;\n  }\n\n  const playerId = state.game.player as string;\n  return playerHasSubmitted(state, playerId);\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\nimport { AppDispatch, AppGetState } from '..';\nimport { socketDeferred } from '../socket';\nimport {\n  GameSliceState,\n  CreateGameParams,\n  GameJoinedEvent,\n  GameUpdatedEvent,\n  JoinGameParams,\n  Alert,\n} from './types';\nimport * as selectors from './selectors';\n\nconst initialState: GameSliceState = {\n  config: {},\n  startingGame: false,\n  choosingConcept: undefined,\n  submittedEntry: false,\n  acknowledgedWinner: false,\n  alerts: [],\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setPlayerName: (state, action: PayloadAction<string>): void => {\n      state.config.name = action.payload;\n    },\n    setCode: (state, action: PayloadAction<string>): void => {\n      state.config.code = action.payload;\n    },\n    setGamePlayer: (state, action: PayloadAction<GameJoinedEvent>): void => {\n      state.player = action.payload.player;\n    },\n    leaveGame: (state): void => {\n      state.config = {\n        code: undefined,\n        name: undefined,\n      };\n      state.player = undefined;\n      state.gameState = undefined;\n      state.startingGame = false;\n      state.choosingConcept = undefined;\n      state.submittedEntry = false;\n      state.chosenEntry = undefined;\n      state.acknowledgedWinner = false;\n      state.alerts = [];\n    },\n    startGame: (state): void => {\n      state.startingGame = true;\n    },\n    chooseConcept: (state, action: PayloadAction<string>): void => {\n      state.choosingConcept = action.payload;\n    },\n    submitEntry: (state): void => {\n      state.submittedEntry = true;\n    },\n    chooseEntry: (state, action: PayloadAction<string>): void => {\n      state.chosenEntry = action.payload;\n    },\n    acknowledgeWinner: (state): void => {\n      state.acknowledgedWinner = true;\n    },\n    updateGame: (state, action: PayloadAction<GameUpdatedEvent>): void => {\n      const {\n        payload: { updateBy, gameState, alert },\n      } = action;\n\n      if (updateBy === state.player) {\n        state.startingGame = false;\n        state.choosingConcept = undefined;\n        state.submittedEntry = false;\n        state.chosenEntry = undefined;\n        state.acknowledgedWinner = false;\n      }\n\n      const hasAlert = !!alert;\n      const playerId = state.player as string;\n      const forCurrentPlayer =\n        !alert?.ignorePlayers || !alert.ignorePlayers.includes(playerId);\n\n      if (hasAlert && forCurrentPlayer) {\n        state.alerts.push(alert as Alert);\n      }\n\n      if (\n        state.gameState &&\n        state.gameState.lastUpdate > gameState.lastUpdate\n      ) {\n        return;\n      }\n      state.gameState = gameState;\n    },\n    dismissAlert: (state): void => {\n      if (state.alerts.length > 0) {\n        state.alerts.shift();\n      }\n    },\n  },\n});\n\nconst { actions, reducer } = gameSlice;\n\nexport default reducer;\n\nexport const subscribe = (\n  dispatch: AppDispatch,\n  socket: SocketIOClient.Socket\n): void => {\n  socket.on('connectedToGame', (event: GameJoinedEvent) => {\n    console.log('connectedToGame:', event);\n    dispatch(actions.setGamePlayer(event));\n  });\n\n  socket.on('gameUpdated', (event: GameUpdatedEvent) => {\n    console.log('gameUpdated:', event);\n\n    dispatch(actions.updateGame(event));\n  });\n\n  socket.on('gameDoesNotExist', () => {\n    console.log('gameDoesNotExist');\n    dispatch(actions.leaveGame());\n  });\n\n  socket.on('disconnect', () => {\n    console.log('disconnect');\n    dispatch(actions.leaveGame());\n  });\n};\n\nexport const joinGame = ({ code, name, goToGame }: JoinGameParams) => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  dispatch(actions.setPlayerName(name));\n  dispatch(actions.setCode(code));\n  goToGame(code);\n};\n\nexport const createGame = ({ name, goToGame }: CreateGameParams) => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  const code = uuid();\n  dispatch(joinGame({ code, name, goToGame }));\n};\n\nexport const connectToGameChannel = () => async (\n  _dispatch: AppDispatch,\n  getState: AppGetState\n): Promise<void> => {\n  const {\n    game: {\n      config: { name, code },\n    },\n  } = getState();\n  const socket = await socketDeferred.promise;\n  socket.emit('joinGame', { name, code });\n};\n\nexport const startGame = () => async (dispatch: AppDispatch): Promise<void> => {\n  dispatch(actions.startGame());\n  const socket = await socketDeferred.promise;\n  socket.emit('startGame', {});\n};\n\nexport const leaveGame = () => async (dispatch: AppDispatch): Promise<void> => {\n  dispatch(actions.leaveGame());\n  const socket = await socketDeferred.promise;\n  socket.emit('leaveGame', {});\n};\n\nexport const chooseConcept = (concept: string) => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  dispatch(actions.chooseConcept(concept));\n  const socket = await socketDeferred.promise;\n  socket.emit('chooseConcept', { concept });\n};\n\nexport const submitDrawing = (drawing: string) => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  dispatch(actions.submitEntry());\n  const socket = await socketDeferred.promise;\n  socket.emit('submitEntry', {\n    entry: { type: 'drawing', drawing },\n  });\n};\n\nexport const submitConcept = (concept: string) => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  dispatch(actions.submitEntry());\n  const socket = await socketDeferred.promise;\n  socket.emit('submitEntry', {\n    entry: { type: 'concept', concept },\n  });\n};\n\nexport const chooseEntry = (targetPlayer: string) => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  dispatch(actions.chooseEntry(targetPlayer));\n  const socket = await socketDeferred.promise;\n  socket.emit('chooseEntry', { targetPlayer });\n};\n\nexport const acknowledgeWinner = () => async (\n  dispatch: AppDispatch\n): Promise<void> => {\n  dispatch(actions.acknowledgeWinner());\n  const socket = await socketDeferred.promise;\n  socket.emit('acknowledgeWinner', {});\n};\n\nconst { dismissAlert } = actions;\nexport { dismissAlert };\n\nexport { selectors };\n","import { connect } from 'react-redux';\n\nimport Menu, { DispatchProps } from './Menu';\nimport { AppDispatch } from '../../store';\nimport { createGame, joinGame } from '../../store/game';\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  startGame: ({ mode, name, code, goToGame }): void => {\n    if (mode === 'newGame') {\n      dispatch(createGame({ name, goToGame }));\n    } else {\n      dispatch(joinGame({ name, code, goToGame }));\n    }\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Menu);\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  alert: {\n    maxWidth: 500,\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from '@material-ui/lab/Alert';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\nimport useStyles from './Connecting.styles';\nimport Emoji from '../Emoji';\n\nexport type Props = {\n  hasError: boolean;\n};\n\nconst Connecting: FunctionComponent<Props> = ({ hasError }) => {\n  const classes = useStyles();\n  const severity = hasError ? 'error' : 'info';\n  const message = hasError ? (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      spacing={1}\n    >\n      <Grid item>\n        <Typography variant=\"h4\">\n          <Emoji symbol=\"🙈\" />\n        </Typography>\n      </Grid>\n      <Grid item>Failed to connect, retrying...</Grid>\n    </Grid>\n  ) : (\n    'Connecting...'\n  );\n  return (\n    <Grid item xs={12}>\n      <Alert\n        icon={false}\n        className={classes.alert}\n        variant=\"outlined\"\n        severity={severity}\n      >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item>\n            <CircularProgress color=\"inherit\" />\n          </Grid>\n          <Grid item>{message}</Grid>\n        </Grid>\n      </Alert>\n    </Grid>\n  );\n};\n\nexport default Connecting;\n","import { connect } from 'react-redux';\n\nimport Connecting, { Props } from './Connecting';\nimport { RootState } from '../../store/reducers';\n\nconst mapStateToProps = (state: RootState): Props => ({\n  hasError: state.socket.hasError,\n});\n\nexport default connect(mapStateToProps)(Connecting);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport MainContent from '../MainContent';\nimport Emoji from '../Emoji';\n\nconst WaitingToJoin: React.FunctionComponent = () => (\n  <MainContent>\n    <Grid container direction=\"row\" alignItems=\"center\" spacing={2}>\n      <Grid item>\n        <Typography variant=\"h4\">\n          <Emoji symbol=\"✏️\" />\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography>You will join the game in the next round.</Typography>\n      </Grid>\n    </Grid>\n  </MainContent>\n);\n\nexport default WaitingToJoin;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  buttonContainer: {\n    paddingTop: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","const pluralize = (singular: string, plural: string, count: number): string =>\n  count === 1 ? singular : plural;\n\nexport default pluralize;\n","import React, { FunctionComponent, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport copy from 'copy-to-clipboard';\n\nimport MainContent from '../MainContent';\nimport Emoji from '../Emoji';\nimport { HowToPlayPanel } from '../HowToPlay';\nimport useStyles from './InitialPhase.styles';\nimport pluralize from '../../utils/pluralize';\n\nexport type StateProps = {\n  createdGame: boolean;\n  creatorName: string;\n  missingPlayers: number;\n  gameFull: boolean;\n  gameUrl: string;\n};\n\nexport type DispatchProps = {\n  onStart: () => void;\n};\n\ntype Props = StateProps & DispatchProps;\n\nconst InitialPhase: FunctionComponent<Props> = ({\n  createdGame,\n  creatorName,\n  missingPlayers,\n  onStart,\n  gameFull,\n  gameUrl,\n}) => {\n  const classes = useStyles();\n\n  const startButton = createdGame ? (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      disabled={missingPlayers > 0}\n      onClick={onStart}\n    >\n      <Emoji symbol=\"🚀\" />\n      <span>Start!</span>\n    </Button>\n  ) : null;\n\n  let message = '';\n  if (missingPlayers > 0) {\n    message = `Waiting for ${missingPlayers} more ${pluralize(\n      'player',\n      'players',\n      missingPlayers\n    )}.`;\n  } else if (createdGame) {\n    message = 'Ready to start?';\n  } else {\n    message = `Waiting for ${creatorName} to start the game.`;\n  }\n\n  const [alertOpen, setAlertOpen] = useState(false);\n  const handleInviteClicked = (): void => {\n    copy(gameUrl);\n    setAlertOpen(true);\n  };\n  const handleAlertClosed = (): void => {\n    setAlertOpen(false);\n  };\n\n  return (\n    <Grid container direction=\"column\" spacing={3}>\n      <Grid item>\n        <MainContent>\n          <Grid item xs={12}>\n            <Typography>{message}</Typography>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            className={classes.buttonContainer}\n          >\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={gameFull}\n                onClick={handleInviteClicked}\n              >\n                Invite friends\n              </Button>\n              <Snackbar\n                open={alertOpen}\n                autoHideDuration={5000}\n                onClose={handleAlertClosed}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n              >\n                <Alert onClose={handleAlertClosed} severity=\"success\">\n                  Game code copied to clipboard!\n                </Alert>\n              </Snackbar>\n            </Grid>\n            <Grid item>{startButton}</Grid>\n          </Grid>\n        </MainContent>\n      </Grid>\n      <Grid item>\n        <HowToPlayPanel />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default InitialPhase;\n","import { connect } from 'react-redux';\n\nimport InitialPhase, { StateProps, DispatchProps } from './InitialPhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { GameState } from '../../store/game/types';\nimport { startGame } from '../../store/game';\nimport { MIN_PLAYERS, MAX_PLAYERS } from '../../store/game/constants';\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  const game = state.game.gameState as GameState;\n  const player = state.game.player as string;\n  const numPlayers = Object.keys(game.players).length;\n  const createdBy = game.players[game.createdBy];\n  const location = window.location;\n\n  return {\n    creatorName: createdBy.name,\n    createdGame: createdBy.id === player,\n    missingPlayers: Math.max(0, MIN_PLAYERS - numPlayers),\n    gameFull: numPlayers === MAX_PLAYERS,\n    gameUrl: `${location.protocol}//${location.host}/#/game/${game.code}`,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  onStart: (): void => {\n    dispatch(startGame());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialPhase);\n","const isDevelopment = process.env.NODE_ENV === 'development';\n\nexport const MIN_PLAYERS = isDevelopment ? 2 : 4;\nexport const MAX_PLAYERS = 8;\n","import React, { FunctionComponent, MouseEvent } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Typography from '@material-ui/core/Typography';\n\nimport Emoji from '../Emoji';\n\ntype Props = {\n  concept: string;\n  selected?: boolean;\n  disabled?: boolean;\n  onClick: (event: MouseEvent<HTMLElement>) => void;\n};\n\nconst ConceptListItem: FunctionComponent<Props> = ({\n  concept,\n  selected = false,\n  disabled = false,\n  onClick,\n}) => (\n  <ListItem\n    divider\n    button\n    onClick={onClick}\n    selected={selected}\n    disabled={disabled}\n  >\n    <ListItemAvatar>\n      <Typography variant=\"h4\">\n        <Emoji symbol=\"💡\" />\n      </Typography>\n    </ListItemAvatar>\n    <ListItemText primary={concept} />\n  </ListItem>\n);\n\nexport default ConceptListItem;\n","import React, { FunctionComponent } from 'react';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport MainContent from '../MainContent';\nimport Emoji from '../Emoji';\nimport ConceptListItem from '../ConceptListItem';\n\nexport type StateProps = {\n  concepts: string[];\n  selectedConcept?: string;\n};\n\nexport type DispatchProps = {\n  onChooseConcept: (concept: string) => void;\n};\n\ntype Props = StateProps & DispatchProps;\n\nconst ConceptChoicePhase: FunctionComponent<Props> = ({\n  concepts,\n  selectedConcept,\n  onChooseConcept,\n}) => {\n  const emoji = selectedConcept ? '⏳' : '🤫';\n  const message = selectedConcept\n    ? 'You will start drawing as soon as every player has chosen what to draw.'\n    : 'Choose what to draw. Keep it a secret!';\n\n  return (\n    <MainContent>\n      <Grid item xs={12}>\n        <Typography>\n          <Emoji symbol={emoji} />\n          <span> {message}</span>\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <List>\n          {concepts.map((concept) => (\n            <ConceptListItem\n              key={concept}\n              concept={concept}\n              selected={selectedConcept === concept}\n              disabled={!!selectedConcept}\n              onClick={(): void => {\n                onChooseConcept(concept);\n              }}\n            />\n          ))}\n        </List>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default ConceptChoicePhase;\n","import { connect } from 'react-redux';\n\nimport ConceptChoicePhase, {\n  StateProps,\n  DispatchProps,\n} from './ConceptChoicePhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { chooseConcept } from '../../store/game';\nimport {\n  ConceptChoicePhase as ConceptChoicePhaseType,\n  Round,\n} from '../../store/game/types';\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  const choosingConcept = state.game.choosingConcept;\n  const round = state.game.gameState?.round as Round;\n  const phase = round.phase as ConceptChoicePhaseType;\n  const playerId = state.game.player as string;\n  const concepts = phase.choices[playerId];\n  const selectedConcept = round.concepts[playerId];\n\n  return {\n    selectedConcept: selectedConcept || choosingConcept,\n    concepts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  onChooseConcept: (concept: string): void => {\n    dispatch(chooseConcept(concept));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConceptChoicePhase);\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    // border: '1px solid',\n    borderRadius: 4,\n  },\n}));\n\nexport default useStyles;\n","import React, { ReactNode, FunctionComponent, MouseEvent } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport useStyles from './ToolBarButton.styles';\n\ntype Props = {\n  title: string;\n  icon: ReactNode;\n  onClick: (event: MouseEvent<HTMLElement>) => void;\n  disabled?: boolean;\n};\n\nconst ToolBarButton: FunctionComponent<Props> = ({\n  title,\n  icon,\n  disabled = false,\n  onClick,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Tooltip title={title} placement=\"left\">\n      <span>\n        <IconButton\n          aria-label={title}\n          onClick={onClick}\n          disabled={disabled}\n          classes={{\n            root: classes.root,\n          }}\n        >\n          {icon}\n        </IconButton>\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default ToolBarButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import React, {\n  useState,\n  FunctionComponent,\n  MouseEvent,\n  ReactNode,\n} from 'react';\n\nimport Popover from '@material-ui/core/Popover';\n\nimport ToolBarButton from '../ToolBarButton';\nimport useStyles from './ExpandableToolBarButton.styles';\n\ntype RenderContentProps = {\n  close: () => void;\n};\n\ntype Props = {\n  title: string;\n  icon: ReactNode;\n  renderContent: (props: RenderContentProps) => ReactNode;\n};\n\nconst ExpandableToolBarButton: FunctionComponent<Props> = ({\n  title,\n  icon,\n  renderContent,\n}) => {\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const handleClick = (event: MouseEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? `${title}-popover` : undefined;\n\n  return (\n    <React.Fragment>\n      <ToolBarButton title={title} icon={icon} onClick={handleClick} />\n      <Popover\n        id={id}\n        classes={{\n          paper: classes.paper,\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: 'left',\n        }}\n      >\n        {renderContent({ close: handleClose })}\n      </Popover>\n    </React.Fragment>\n  );\n};\n\nexport default ExpandableToolBarButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flex: 1,\n    width: 200,\n    height: 25,\n    marginTop: 18,\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\n\nimport Slider from '@material-ui/core/Slider';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nimport ExpandableToolBarButton from '../ExpandableToolBarButton';\nimport useStyles from './LineWidthPickerButton.styles';\n\ntype Props = {\n  lineWidth: number;\n  onLineWidthChange: (width: number) => void;\n};\n\nconst valueText = (value: number): string => `${value} px`;\n\nconst LineWidthPickerButton: FunctionComponent<Props> = ({\n  lineWidth,\n  onLineWidthChange,\n}) => {\n  const classes = useStyles();\n\n  const handleChange = (_e: unknown, newValue: number | number[]): void => {\n    onLineWidthChange(Array.isArray(newValue) ? newValue[0] : newValue);\n  };\n\n  return (\n    <ExpandableToolBarButton\n      title=\"Line width\"\n      icon={<FiberManualRecordIcon />}\n      renderContent={(): React.ReactNode => (\n        <div className={classes.root}>\n          <Slider\n            value={lineWidth}\n            getAriaValueText={valueText}\n            valueLabelDisplay=\"on\"\n            step={1}\n            min={1}\n            max={50}\n            onChange={handleChange}\n          />\n        </div>\n      )}\n    />\n  );\n};\n\nexport default LineWidthPickerButton;\n","export default [\n  '#f44336',\n  '#e91e63',\n  '#9c27b0',\n  '#673ab7',\n  '#3f51b5',\n  '#2196f3',\n  '#00bcd4',\n  '#009688',\n  '#4caf50',\n  '#8bc34a',\n  '#cddc39',\n  '#ffeb3b',\n  '#ffc107',\n  '#ff9800',\n  '#ff5722',\n  '#795548',\n  '#7d7d7d',\n  '#262626',\n];\n","import React, { FunctionComponent } from 'react';\n\nimport { CirclePicker, ColorResult } from 'react-color';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nimport ExpandableToolBarButton from '../ExpandableToolBarButton';\nimport Colors from './Colors';\n\ntype Props = {\n  color?: string;\n  onColorChange: (color: string) => void;\n};\n\nconst ColorPickerButton: FunctionComponent<Props> = ({\n  color = Colors[0],\n  onColorChange,\n}) => {\n  const handleOnChangeComplete = (color: ColorResult): void => {\n    onColorChange(color.hex);\n  };\n\n  return (\n    <ExpandableToolBarButton\n      title=\"Color\"\n      icon={<FiberManualRecordIcon style={{ color }} />}\n      renderContent={({ close }): React.ReactNode => (\n        <CirclePicker\n          colors={Colors}\n          color={color}\n          onChangeComplete={(color): void => {\n            close();\n            handleOnChangeComplete(color);\n          }}\n        />\n      )}\n    />\n  );\n};\n\nexport default ColorPickerButton;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16.24 3.56l4.95 4.94c.78.79.78 2.05 0 2.84L12 20.53a4.008 4.008 0 0 1-5.66 0L2.81 17c-.78-.79-.78-2.05 0-2.84l10.6-10.6c.79-.78 2.05-.78 2.83 0M4.22 15.58l3.54 3.53c.78.79 2.04.79 2.83 0l3.53-3.53l-4.95-4.95l-4.95 4.95z\",\n  fill: \"#626262\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"rect\", {\n  x: 0,\n  y: 0,\n  width: 24,\n  height: 24,\n  fill: \"rgba(0, 0, 0, 0)\"\n});\n\nvar SvgEraser = function SvgEraser(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 24 24\",\n    style: {\n      msTransform: \"rotate(360deg)\",\n      WebkitTransform: \"rotate(360deg)\",\n      transform: \"rotate(360deg)\"\n    },\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgEraser, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/eraser.0015ff96.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FunctionComponent } from 'react';\n\nimport CreateIcon from '@material-ui/icons/Create';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport ExpandableToolBarButton from '../ExpandableToolBarButton';\nimport { ReactComponent as EraserIcon } from './eraser.svg';\n\ntype Tool = 'pencil' | 'eraser';\n\ntype Props = {\n  tool: Tool;\n  onToolChange: (tool: Tool) => void;\n};\n\nconst getIconForTool: FunctionComponent<Tool> = (tool) =>\n  tool === 'pencil' ? (\n    <CreateIcon />\n  ) : (\n    <SvgIcon>\n      <EraserIcon />\n    </SvgIcon>\n  );\n\nconst ToolPickerButton: FunctionComponent<Props> = ({ tool, onToolChange }) => (\n  <ExpandableToolBarButton\n    title=\"Tool\"\n    icon={getIconForTool(tool)}\n    renderContent={({ close }): React.ReactNode => (\n      <ToggleButtonGroup\n        value={tool}\n        exclusive\n        onChange={(_event, newTool): void => {\n          close();\n          onToolChange(newTool);\n        }}\n        aria-label=\"text alignment\"\n      >\n        <ToggleButton value=\"pencil\" aria-label=\"pencil\">\n          <CreateIcon />\n        </ToggleButton>\n        <ToggleButton value=\"eraser\" aria-label=\"eraser\">\n          <SvgIcon>\n            <EraserIcon />\n          </SvgIcon>\n        </ToggleButton>\n      </ToggleButtonGroup>\n    )}\n  />\n);\n\nexport default ToolPickerButton;\n","import React, { FunctionComponent } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport ToolBarButton from '../ToolBarButton';\nimport LineWidthPickerButton from '../LineWidthPickerButton';\nimport ColorPickerButton from '../ColorPickerButton';\nimport ToolPickerButton from '../ToolPickerButton';\n\nexport type Tool = 'pencil' | 'eraser';\n\ntype Props = {\n  lineWidth?: number;\n  onLineWidthChange: (width: number) => void;\n  color?: string;\n  onColorChange: (color: string) => void;\n  tool?: Tool;\n  onToolChange: (tool: Tool) => void;\n  canUndo?: boolean;\n  onUndo: () => void;\n  canRedo?: boolean;\n  onRedo: () => void;\n  onEraseAll: () => void;\n};\n\nconst ToolBar: FunctionComponent<Props> = ({\n  lineWidth = 5,\n  onLineWidthChange,\n  color = '#f44336',\n  onColorChange,\n  tool = 'pencil',\n  onToolChange,\n  canUndo = false,\n  onUndo,\n  canRedo = false,\n  onRedo,\n  onEraseAll,\n}) => (\n  <Grid container direction=\"column\" spacing={0} alignItems=\"center\">\n    <LineWidthPickerButton\n      lineWidth={lineWidth}\n      onLineWidthChange={onLineWidthChange}\n    />\n    <ColorPickerButton color={color} onColorChange={onColorChange} />\n    <ToolPickerButton tool={tool} onToolChange={onToolChange} />\n    <ToolBarButton\n      title=\"Undo\"\n      icon={<UndoIcon />}\n      onClick={onUndo}\n      disabled={!canUndo}\n    />\n    <ToolBarButton\n      title=\"Redo\"\n      icon={<RedoIcon />}\n      onClick={onRedo}\n      disabled={!canRedo}\n    />\n    <ToolBarButton\n      title=\"Erase all\"\n      icon={<DeleteIcon />}\n      onClick={onEraseAll}\n    />\n  </Grid>\n);\n\nexport default ToolBar;\n","import { styled } from '@material-ui/core/styles';\nimport { SketchField as SketchFieldBase } from 'react-sketch';\n\nexport const SketchField = styled(SketchFieldBase)({\n  border: '1px solid',\n  borderRadius: 4,\n});\n","import React, { ReactNode } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport ToolBar from '../ToolBar';\nimport { SketchField } from './Editor.styled';\nimport { SketchField as SketchFieldType } from 'react-sketch';\n\ntype Tool = 'pencil' | 'eraser';\ntype Props = {};\ntype State = {\n  lineWidth: number;\n  color: string;\n  tool: Tool;\n  canUndo: boolean;\n  canRedo: boolean;\n};\n\nclass Editor extends React.Component<Props, State> {\n  private sketch: SketchFieldType | undefined;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      lineWidth: 10,\n      color: '#f44336',\n      tool: 'pencil',\n      canUndo: false,\n      canRedo: false,\n    };\n\n    this.onLineWidthChange = this.onLineWidthChange.bind(this);\n    this.onColorChange = this.onColorChange.bind(this);\n    this.onToolChange = this.onToolChange.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.onRedo = this.onRedo.bind(this);\n    this.onEraseAll = this.onEraseAll.bind(this);\n    this.onSketchChange = this.onSketchChange.bind(this);\n  }\n\n  onLineWidthChange(lineWidth: number): void {\n    this.setState({ lineWidth });\n  }\n\n  onColorChange(color: string): void {\n    this.setState({ color });\n  }\n\n  onToolChange(tool: Tool): void {\n    this.setState({ tool });\n  }\n\n  onUndo(): void {\n    if (!this.sketch) {\n      return;\n    }\n    this.sketch.undo();\n  }\n\n  onRedo(): void {\n    if (!this.sketch) {\n      return;\n    }\n    this.sketch.redo();\n  }\n\n  onEraseAll(): void {\n    if (!this.sketch) {\n      return;\n    }\n    this.sketch.clear();\n  }\n\n  onSketchChange(): void {\n    if (!this.sketch) {\n      return;\n    }\n\n    const { canUndo, canRedo } = this.state;\n    const canUndoNow = this.sketch.canUndo();\n    const canRedoNow = this.sketch.canRedo();\n    const needsUpdate = canUndo !== canUndoNow || canRedo !== canRedoNow;\n    if (needsUpdate) {\n      this.setState({\n        canUndo: canUndoNow,\n        canRedo: canRedoNow,\n      });\n    }\n  }\n\n  export(): string {\n    if (!this.sketch) {\n      return '';\n    }\n    return this.sketch.toDataURL();\n  }\n\n  render(): ReactNode {\n    const { lineWidth, color, tool, canUndo, canRedo } = this.state;\n\n    const editorColor = tool === 'pencil' ? color : '#ffffff';\n\n    return (\n      <Grid container direction=\"row\">\n        <Grid item xs={2}>\n          <ToolBar\n            lineWidth={lineWidth}\n            onLineWidthChange={this.onLineWidthChange}\n            color={color}\n            onColorChange={this.onColorChange}\n            tool={tool}\n            onToolChange={this.onToolChange}\n            canUndo={canUndo}\n            onUndo={this.onUndo}\n            canRedo={canRedo}\n            onRedo={this.onRedo}\n            onEraseAll={this.onEraseAll}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <SketchField\n            ref={(sketch: SketchFieldType): void => {\n              this.sketch = sketch;\n            }}\n            height={480}\n            tool={tool}\n            lineColor={editorColor}\n            lineWidth={lineWidth}\n            onChange={this.onSketchChange}\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default Editor;\n","import React, { FunctionComponent, createRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport MainContent from '../MainContent';\nimport Editor from '../Editor';\nimport Emoji from '../Emoji';\n\nexport type StateProps = {\n  firstCreateTurn: boolean;\n  submitted: boolean;\n  concept: string | undefined;\n  conceptFrom: string | undefined;\n};\n\nexport type DispatchProps = {\n  onSubmit: (image: string) => void;\n};\n\ntype Props = StateProps & DispatchProps;\n\nconst DrawPhase: FunctionComponent<Props> = ({\n  firstCreateTurn,\n  submitted,\n  concept,\n  conceptFrom,\n  onSubmit,\n}) => {\n  const editorRef = createRef<Editor>();\n  const handleSubmitClicked = (): void => {\n    const editor = editorRef.current;\n    if (editor) {\n      const image = editor.export();\n      onSubmit(image);\n    }\n  };\n\n  const emoji = submitted ? '⏳' : '✏️';\n  let message = '';\n  if (submitted) {\n    message = 'Waiting for everyone to finish their drawing.';\n  } else if (firstCreateTurn) {\n    message = `Draw \"${concept}\".`;\n  } else {\n    message = `From ${conceptFrom}, draw \"${concept}\".`;\n  }\n\n  return (\n    <MainContent width={800}>\n      <Grid item xs={12}>\n        <Typography>\n          <Emoji symbol={emoji} />\n          <span> {message}</span>\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Editor ref={editorRef} />\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmitClicked}\n          disabled={submitted}\n        >\n          <Emoji symbol=\"🎨\" />\n          <span>Done</span>\n        </Button>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default DrawPhase;\n","import { connect } from 'react-redux';\n\nimport DrawPhase, { StateProps, DispatchProps } from './DrawPhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { submitDrawing } from '../../store/game';\nimport { selectors } from '../../store/game';\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  firstCreateTurn: selectors.isFirstCreateTurn(state),\n  concept: selectors.currentConcept(state),\n  conceptFrom: selectors.sourceEntryAuthor(state),\n  submitted: selectors.hasSubmitted(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  onSubmit: (drawing: string): void => {\n    dispatch(submitDrawing(drawing));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawPhase);\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  image: {\n    width: 400,\n    borderRadius: 4,\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport useStyles from './GuessPhase.styles';\nimport Emoji from '../Emoji';\nimport MainContent from '../MainContent';\n\nexport type StateProps = {\n  author: string | undefined;\n  image: string;\n  submitted: boolean;\n};\n\nexport type DispatchProps = {\n  onSubmit: (image: string) => void;\n};\n\ntype Props = StateProps & DispatchProps;\n\nconst GuessPhase: FunctionComponent<Props> = ({\n  author,\n  image,\n  submitted,\n  onSubmit,\n}) => {\n  const classes = useStyles();\n  const [guess, setGuess] = useState('');\n  const handleGuessChanged = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setGuess(event.target.value);\n  };\n  const handleSubmitClicked = (): void => {\n    onSubmit(guess);\n  };\n\n  const message = submitted\n    ? 'Waiting for everyone to guess.'\n    : `Guess what ${author} drew.`;\n  const emoji = submitted ? '⏳' : '🕵️‍♂️';\n\n  return (\n    <MainContent width={800}>\n      <Grid item xs={12}>\n        <Typography>\n          <Emoji symbol={emoji} />\n          <span> {message}</span>\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <img src={image} alt={message} className={classes.image} />\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Guess\"\n          value={guess}\n          onChange={handleGuessChanged}\n          disabled={submitted}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmitClicked}\n          disabled={submitted}\n        >\n          <Emoji symbol=\"🎨\" />\n          <span>Done</span>\n        </Button>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default GuessPhase;\n","import { connect } from 'react-redux';\n\nimport GuessPhase, { StateProps, DispatchProps } from './GuessPhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { submitConcept } from '../../store/game';\nimport { selectors } from '../../store/game';\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  submitted: selectors.hasSubmitted(state),\n  author: selectors.sourceEntryAuthor(state),\n  image: selectors.currentDrawing(state) as string,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  onSubmit: (concept: string): void => {\n    dispatch(submitConcept(concept));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuessPhase);\n","import React, { FunctionComponent } from 'react';\n\nimport DrawPhase from '../DrawPhase';\nimport GuessPhase from '../GuessPhase';\n\nexport type EntryType = 'draw' | 'guess';\n\nexport type Props = {\n  type: EntryType;\n};\n\nconst CreateEntryPhase: FunctionComponent<Props> = ({ type }) =>\n  type === 'draw' ? <DrawPhase /> : <GuessPhase />;\n\nexport default CreateEntryPhase;\n","import { connect } from 'react-redux';\n\nimport CreateEntryPhase, { EntryType, Props } from './CreateEntryPhase';\nimport { RootState } from '../../store/reducers';\nimport { CreateEntryPhase as CreateEntryPhaseType } from '../../store/game/types';\n\nconst mapStateToProps = (state: RootState): Props => {\n  const phase = state.game.gameState?.round.phase as CreateEntryPhaseType;\n  const type: EntryType = phase.index % 2 === 0 ? 'draw' : 'guess';\n\n  return { type };\n};\n\nexport default connect(mapStateToProps)(CreateEntryPhase);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(3),\n  },\n  avatar: {\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Avatar from '@material-ui/core/Avatar';\nimport Avataaar from 'avataaars';\n\nimport { Avatar as AvatarType } from '../../store/game/types';\nimport useStyles from './EntryCard.styles';\n\ntype Props = {\n  name: string;\n  avatar: AvatarType;\n  entry: ReactNode;\n  onClick?: () => void;\n};\n\nconst EntryCard: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  entry,\n  onClick,\n}) => {\n  const classes = useStyles();\n\n  const content = (\n    <div className={classes.container}>\n      <CardHeader\n        avatar={\n          <Avatar variant=\"rounded\" alt={name} className={classes.avatar}>\n            <Avataaar\n              avatarStyle=\"Circle\"\n              topType={avatar.topType}\n              accessoriesType={avatar.accessoriesType}\n              hairColor={avatar.hairColor}\n              facialHairType={avatar.facialHairType}\n              clotheType={avatar.clotheType}\n              clotheColor={avatar.clotheColor}\n              eyeType={avatar.eyeType}\n              eyebrowType={avatar.eyebrowType}\n              mouthType={avatar.mouthType}\n              skinColor={avatar.skinColor}\n            />\n          </Avatar>\n        }\n        title={name}\n      />\n      {entry}\n    </div>\n  );\n  const wrapped = onClick ? (\n    <CardActionArea onClick={onClick}>{content}</CardActionArea>\n  ) : (\n    content\n  );\n\n  return (\n    <Grid item xs={12}>\n      {wrapped}\n    </Grid>\n  );\n};\n\nexport default EntryCard;\n","import React, { FunctionComponent } from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport EntryCard from '../EntryCard';\nimport { Avatar } from '../../store/game/types';\n\nexport type StateProps = {\n  name: string;\n  avatar: Avatar;\n};\n\ntype Props = StateProps & {\n  image: string;\n  onClick?: () => void;\n};\n\nconst DoodleEntryCard: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  image,\n  onClick,\n}) => (\n  <EntryCard\n    name={name}\n    avatar={avatar}\n    entry={\n      <CardMedia\n        component=\"img\"\n        image={image}\n        width=\"500\"\n        title={`Entry by ${name}`}\n      />\n    }\n    onClick={onClick}\n  />\n);\n\nexport default DoodleEntryCard;\n","import { connect } from 'react-redux';\n\nimport DoodleEntryCard, { StateProps } from './DoodleEntryCard';\nimport { RootState } from '../../store/reducers';\nimport { GameState } from '../../store/game/types';\n\ninterface OwnProps {\n  playerId: string;\n}\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps): StateProps => {\n  const game = state.game.gameState as GameState;\n  const player = game.players[ownProps.playerId];\n  return {\n    name: player.name,\n    avatar: player.avatar,\n  };\n};\nexport default connect(mapStateToProps)(DoodleEntryCard);\n","import React, { FunctionComponent } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport EntryCard from '../EntryCard';\nimport { Avatar } from '../../store/game/types';\n\nexport type StateProps = {\n  name: string;\n  avatar: Avatar;\n};\n\ntype Props = StateProps & {\n  concept: string;\n  onClick?: () => void;\n};\n\nconst ConceptEntryCard: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  concept,\n  onClick,\n}) => (\n  <EntryCard\n    name={name}\n    avatar={avatar}\n    entry={\n      <CardContent>\n        <Typography variant=\"h4\">{concept}</Typography>\n      </CardContent>\n    }\n    onClick={onClick}\n  />\n);\n\nexport default ConceptEntryCard;\n","import { connect } from 'react-redux';\n\nimport ConceptEntryCard, { StateProps } from './ConceptEntryCard';\nimport { RootState } from '../../store/reducers';\nimport { GameState } from '../../store/game/types';\n\ninterface OwnProps {\n  playerId: string;\n}\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps): StateProps => {\n  const game = state.game.gameState as GameState;\n  const player = game.players[ownProps.playerId];\n  return {\n    name: player.name,\n    avatar: player.avatar,\n  };\n};\nexport default connect(mapStateToProps)(ConceptEntryCard);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(3),\n    maxWidth: 500,\n  },\n  entryPaper: {\n    maxWidth: 500,\n  },\n  selectedEntry: {\n    borderWidth: 4,\n    borderColor: theme.palette.primary.main,\n  },\n  choicesContainer: {\n    padding: theme.spacing(3),\n    maxWidth: 500,\n  },\n  img: {\n    width: '100%',\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport Emoji from '../Emoji';\nimport DoodleEntryCard from '../DoodleEntryCard';\nimport ConceptEntryCard from '../ConceptEntryCard';\nimport { Entry } from '../../store/game/types';\nimport useStyles from './EntryChoicePhase.styles';\n\ntype Props = {\n  winningEntry: Entry;\n  concept: string;\n  stackPlayerName: string;\n  currentPlayerChose: boolean;\n  chosenPlayerName: string;\n  acknowledged: boolean;\n  onAcknowledge: () => void;\n};\n\nconst EntryChoiceAcknowledge: FunctionComponent<Props> = ({\n  winningEntry,\n  concept,\n  stackPlayerName,\n  currentPlayerChose,\n  chosenPlayerName,\n  acknowledged,\n  onAcknowledge,\n}) => {\n  const classes = useStyles();\n\n  const message = currentPlayerChose\n    ? `You chose the entry by ${chosenPlayerName} for \"${concept}\"!`\n    : `${stackPlayerName} chose the entry by ${chosenPlayerName} for \"${concept}\"!`;\n\n  const entryCard =\n    winningEntry.data.type === 'drawing' ? (\n      <DoodleEntryCard\n        playerId={winningEntry.author}\n        image={winningEntry.data.drawing}\n      />\n    ) : (\n      <ConceptEntryCard\n        playerId={winningEntry.author}\n        concept={winningEntry.data.concept}\n      />\n    );\n\n  const nextButton = !currentPlayerChose ? (\n    <Grid item xs={12}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={acknowledged}\n        onClick={onAcknowledge}\n      >\n        <Emoji symbol=\"👏\" />\n        <span>Next</span>\n      </Button>\n    </Grid>\n  ) : null;\n\n  return (\n    <Grid item xs={12}>\n      <Paper elevation={1} variant=\"outlined\" className={classes.paper}>\n        <Grid container direction=\"column\" spacing={2}>\n          <Grid item xs={12}>\n            <Typography>\n              <Emoji symbol=\"🥳\" />\n              <span> {message}</span>\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            {entryCard}\n          </Grid>\n          {nextButton}\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default EntryChoiceAcknowledge;\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport useStyles from './EntryChoicePhase.styles';\nimport Emoji from '../Emoji';\nimport DoodleEntryCard from '../DoodleEntryCard';\nimport ConceptEntryCard from '../ConceptEntryCard';\nimport { Entry, DrawingEntry } from '../../store/game/types';\n\ntype Props = {\n  entries: Entry[];\n  concept: string;\n  stackPlayerName: string;\n  currentPlayerChooses: boolean;\n  onChooseEntry: (playerId: string) => void;\n};\n\nconst EntryChoiceList: FunctionComponent<Props> = ({\n  entries,\n  concept,\n  stackPlayerName,\n  currentPlayerChooses,\n  onChooseEntry,\n}) => {\n  const classes = useStyles();\n\n  const message = currentPlayerChooses\n    ? `Choose your favourite entry for \"${concept}\".`\n    : `${stackPlayerName} is choosing their favourite entry for \"${concept}\".`;\n  const emoji = currentPlayerChooses ? '🤔' : '😅';\n\n  const firstEntry = entries[0];\n  const drawingEntry = firstEntry.data as DrawingEntry;\n  const otherEntries = entries.slice(1);\n\n  return (\n    <Grid item xs={12}>\n      <Grid container direction=\"column\" spacing={4}>\n        <Grid item xs={12}>\n          <Paper elevation={1} variant=\"outlined\" className={classes.paper}>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item xs={12}>\n                <Typography>\n                  <Emoji symbol={emoji} />\n                  <span> {message}</span>\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <img\n                  className={classes.img}\n                  src={drawingEntry.drawing}\n                  alt={`Initial drawing by ${stackPlayerName}`}\n                />\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        {otherEntries.map((entry) => {\n          const entryCard =\n            entry.data.type === 'drawing' ? (\n              <DoodleEntryCard\n                playerId={entry.author}\n                image={entry.data.drawing}\n                onClick={\n                  currentPlayerChooses\n                    ? (): void => {\n                        onChooseEntry(entry.author);\n                      }\n                    : undefined\n                }\n              />\n            ) : (\n              <ConceptEntryCard\n                playerId={entry.author}\n                concept={entry.data.concept}\n                onClick={\n                  currentPlayerChooses\n                    ? (): void => {\n                        onChooseEntry(entry.author);\n                      }\n                    : undefined\n                }\n              />\n            );\n          return (\n            <Grid item xs={12} key={entry.author}>\n              <Paper\n                elevation={1}\n                variant=\"outlined\"\n                className={classes.entryPaper}\n              >\n                {entryCard}\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default EntryChoiceList;\n","import React, { FunctionComponent } from 'react';\n\nimport EntryChoiceAcknowledge from './EntryChoiceAcknowledge';\nimport EntryChoiceList from './EntryChoiceList';\nimport { Entry } from '../../store/game/types';\n\nexport type StateProps = {\n  entries: Entry[];\n  concept: string;\n  stackPlayerName: string;\n  currentPlayerChooses: boolean;\n  chosenPlayerId?: string;\n  chosenPlayerName?: string;\n  acknowledged: boolean;\n};\n\nexport type DispatchProps = {\n  onChooseEntry: (playerId: string) => void;\n  onAcknowledge: () => void;\n};\n\ntype Props = StateProps & DispatchProps;\n\nconst EntryChoicePhase: FunctionComponent<Props> = ({\n  entries,\n  concept,\n  stackPlayerName,\n  currentPlayerChooses,\n  chosenPlayerId,\n  chosenPlayerName,\n  acknowledged,\n  onChooseEntry,\n  onAcknowledge,\n}) =>\n  chosenPlayerId ? (\n    <EntryChoiceAcknowledge\n      winningEntry={\n        entries.find((entry) => entry.author === chosenPlayerId) as Entry\n      }\n      concept={concept}\n      stackPlayerName={stackPlayerName}\n      currentPlayerChose={currentPlayerChooses}\n      chosenPlayerName={chosenPlayerName as string}\n      acknowledged={acknowledged}\n      onAcknowledge={onAcknowledge}\n    />\n  ) : (\n    <EntryChoiceList\n      entries={entries}\n      concept={concept}\n      stackPlayerName={stackPlayerName}\n      currentPlayerChooses={currentPlayerChooses}\n      onChooseEntry={onChooseEntry}\n    />\n  );\n\nexport default EntryChoicePhase;\n","import { connect } from 'react-redux';\n\nimport EntryChoicePhase, {\n  StateProps,\n  DispatchProps,\n} from './EntryChoicePhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport {\n  GameState,\n  EntryChoicePhase as EntryChoicePhaseType,\n} from '../../store/game/types';\nimport { chooseEntry, acknowledgeWinner } from '../../store/game';\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  const game = state.game.gameState as GameState;\n  const phase = game.round.phase as EntryChoicePhaseType;\n  const stackPlayerId = game.round.order[phase.index];\n  const stackPlayerName = game.players[stackPlayerId].name;\n  const concept = game.round.concepts[stackPlayerId];\n  const stack = game.round.stacks[stackPlayerId];\n  const playerId = state.game.player as string;\n  const currentPlayerChooses = playerId === stackPlayerId;\n  const chosenPlayerId = stack.chosen || state.game.chosenEntry;\n  const chosenPlayerName = chosenPlayerId\n    ? game.players[chosenPlayerId].name\n    : undefined;\n  const entries = stack.entries;\n  const acknowledged =\n    state.game.acknowledgedWinner || !!phase.acknowledgedBy[playerId];\n\n  return {\n    stackPlayerName,\n    concept,\n    currentPlayerChooses,\n    chosenPlayerId,\n    chosenPlayerName,\n    entries,\n    acknowledged,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  onChooseEntry: (targetPlayer: string): void => {\n    dispatch(chooseEntry(targetPlayer));\n  },\n  onAcknowledge: (): void => {\n    dispatch(acknowledgeWinner());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EntryChoicePhase);\n","import React, { ReactNode } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\nimport Connecting from '../Connecting';\nimport WaitingToJoin from '../WaitingToJoin';\nimport InitialPhase from '../InitialPhase';\nimport ConceptChoicePhase from '../ConceptChoicePhase';\nimport CreateEntryPhase from '../CreateEntryPhase';\nimport EntryChoicePhase from '../EntryChoicePhase';\n\nimport { Alert as AlertType } from '../../store/game/types';\n\nexport type StateProps = {\n  connected: boolean;\n  waitingToJoin: boolean;\n  phaseName: string;\n  alert?: AlertType;\n};\n\nexport type DispatchProps = {\n  connect: () => void;\n  leave: () => void;\n  dismissAlert: () => void;\n};\n\ntype Props = RouteComponentProps<{}> & StateProps & DispatchProps;\n\nclass Game extends React.Component<Props, {}> {\n  unblock?: () => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.onBeforeUnload = this.onBeforeUnload.bind(this);\n  }\n\n  onBeforeUnload(e: BeforeUnloadEvent): string | undefined {\n    if (process.env.NODE_ENV !== 'development') {\n      const dialogText = 'You will exit the game.';\n      e.returnValue = dialogText;\n      return dialogText;\n    }\n  }\n\n  componentDidMount(): void {\n    const { connect, history } = this.props;\n\n    connect();\n    window.addEventListener('beforeunload', this.onBeforeUnload);\n    this.unblock = history.block('Are you sure you want to leave the game?');\n  }\n\n  componentWillUnmount(): void {\n    window.removeEventListener('beforeunload', this.onBeforeUnload);\n    const { leave } = this.props;\n    leave();\n    if (this.unblock) {\n      this.unblock();\n    }\n  }\n\n  renderContent(): ReactNode {\n    const { connected, phaseName, waitingToJoin } = this.props;\n\n    if (!connected) {\n      return <Connecting />;\n    }\n\n    if (waitingToJoin) {\n      return <WaitingToJoin />;\n    }\n\n    switch (phaseName) {\n      case 'initial':\n        return <InitialPhase />;\n      case 'conceptChoice':\n        return <ConceptChoicePhase />;\n      case 'createEntry':\n        return <CreateEntryPhase />;\n      case 'entryChoice':\n        return <EntryChoicePhase />;\n      default:\n        return <Typography>Unknown phase</Typography>;\n    }\n  }\n\n  renderAlert(): ReactNode {\n    const { alert, dismissAlert } = this.props;\n    const alertComponent = alert ? (\n      <Alert onClose={dismissAlert} severity={alert.severity}>\n        {alert.message}\n      </Alert>\n    ) : undefined;\n\n    return (\n      <Snackbar\n        open={!!alert}\n        autoHideDuration={5000}\n        onClose={dismissAlert}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        {alertComponent}\n      </Snackbar>\n    );\n  }\n\n  render(): ReactNode {\n    return (\n      <React.Fragment>\n        {this.renderContent()}\n        {this.renderAlert()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Game);\n","import { connect } from 'react-redux';\n\nimport Game, { StateProps, DispatchProps } from './Game';\nimport { AppDispatch } from '../../store';\nimport {\n  connectToGameChannel,\n  leaveGame,\n  dismissAlert,\n} from '../../store/game';\nimport { RootState } from '../../store/reducers';\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  const game = state.game.gameState;\n  const playerId = state.game.player;\n\n  if (!game || !playerId) {\n    return {\n      connected: false,\n      waitingToJoin: false,\n      phaseName: '',\n    };\n  }\n\n  return {\n    connected: true,\n    waitingToJoin: !!game.waitingPlayers[playerId],\n    phaseName: game.round.phase.name,\n    alert: state.game.alerts.length > 0 ? state.game.alerts[0] : undefined,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  connect: (): void => {\n    dispatch(connectToGameChannel());\n  },\n  leave: (): void => {\n    dispatch(leaveGame());\n  },\n  dismissAlert: (): void => {\n    dispatch(dismissAlert());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { useState, FunctionComponent } from 'react';\nimport { useParams, withRouter, RouteComponentProps } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport Emoji from '../Emoji';\nimport { JoinGameParams } from '../../store/game/types';\nimport MainContent from '../MainContent';\n\nexport type DispatchProps = {\n  joinGame: (params: JoinGameParams) => void;\n};\n\ntype Props = RouteComponentProps<{}> & DispatchProps;\n\nconst JoinMenu: FunctionComponent<Props> = ({ joinGame, history }) => {\n  const [name, setName] = useState('');\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setName(event.target.value);\n  };\n\n  const { code } = useParams();\n  const handleGoClicked = (): void => {\n    joinGame({\n      name,\n      code: code as string,\n      goToGame: (code: string) => history.push(`/game/${code}`),\n    });\n  };\n\n  const hasName = name.length > 0;\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n      <Grid item>\n        <MainContent>\n          <form onSubmit={handleGoClicked}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Typography>\n                  <Emoji symbol=\"👥\" />\n                  <span>Join a game</span>\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Player name\"\n                  value={name}\n                  onChange={handleNameChange}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!hasName}\n                  onClick={handleGoClicked}\n                >\n                  <Emoji symbol=\"🙌\" />\n                  <span>Go!</span>\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </MainContent>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withRouter(JoinMenu);\n","import { connect } from 'react-redux';\n\nimport JoinMenu, { DispatchProps } from './JoinMenu';\nimport { AppDispatch } from '../../store';\nimport { joinGame } from '../../store/game';\nimport { JoinGameParams } from '../../store/game/types';\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  joinGame: (params: JoinGameParams): void => {\n    dispatch(joinGame(params));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(JoinMenu);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawerButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n}));\n\nexport default useStyles;\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Hidden from '@material-ui/core/Hidden';\n\nconst TopBarTitle: React.FunctionComponent = () => (\n  <Grid\n    container\n    direction=\"row\"\n    justify=\"flex-start\"\n    alignItems=\"center\"\n    spacing={2}\n  >\n    <Hidden smUp implementation=\"css\">\n      <Grid item>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          Doodle\n        </Typography>\n      </Grid>\n    </Hidden>\n    <Hidden xsDown implementation=\"css\">\n      <Grid item>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          Doodle - A crazy drawing &amp; guessing chain game\n        </Typography>\n      </Grid>\n    </Hidden>\n  </Grid>\n);\n\nexport default TopBarTitle;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  iconButton: {\n    color: 'white',\n  },\n}));\n\nexport default useStyles;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"title\", null, \"GitHub icon\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"\n});\n\nvar SvgGithub = function SvgGithub(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    role: \"img\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef\n  }, props), title === undefined ? _ref2 : title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgGithub, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/github.617870e4.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FunctionComponent, useState } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport HelpIcon from '@material-ui/icons/Help';\n\nimport useStyles from './TopBarLinks.styles';\nimport { ReactComponent as GitHub } from './github.svg';\n// import { ReactComponent as Kofi } from './ko-fi.svg';\nimport { HowToPlayDialog } from '../HowToPlay';\n\nconst openUrl = (url: string): void => {\n  window.open(url, '_blank');\n};\n\nexport type Props = {\n  gameStarted: boolean;\n};\n\nconst TopBarLinks: FunctionComponent<Props> = ({ gameStarted }) => {\n  const classes = useStyles();\n\n  const [helpOpen, setHelpOpen] = useState(false);\n  const handleHelpClicked = (): void => setHelpOpen(true);\n  const handleHelpClosed = (): void => setHelpOpen(false);\n\n  const handleGithubClicked = (): void => {\n    openUrl('https://github.com/dsaltares/doodle');\n  };\n\n  const howToPlay = gameStarted ? (\n    <Grid item>\n      <Button\n        className={classes.iconButton}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleHelpClicked}\n        startIcon={<HelpIcon />}\n      >\n        How to play\n      </Button>\n    </Grid>\n  ) : undefined;\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        spacing={0}\n      >\n        {howToPlay}\n        {/* <Grid item>\n          <Tooltip title=\"Support the project on Ko-fi ☕\" placement=\"bottom\">\n            <IconButton\n              className={classes.iconButton}\n              onClick={() => openUrl('https://ko-fi.com/dsaltares')}\n            >\n              <SvgIcon>\n                <Kofi />\n              </SvgIcon>\n            </IconButton>\n          </Tooltip>\n        </Grid> */}\n        <Grid item>\n          <Tooltip title=\"Check out the source code! 💻\" placement=\"bottom\">\n            <IconButton\n              className={classes.iconButton}\n              onClick={handleGithubClicked}\n            >\n              <SvgIcon>\n                <GitHub href=\"https://github.com/dsaltares/doodle\" />\n              </SvgIcon>\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </Grid>\n      <HowToPlayDialog open={helpOpen} onClose={handleHelpClosed} />\n    </>\n  );\n};\n\nexport default TopBarLinks;\n","import { connect } from 'react-redux';\n\nimport TopBarLinks, { Props } from './TopBarLinks';\nimport { RootState } from '../../store/reducers';\n\nconst mapStateToProps = (state: RootState): Props => {\n  const game = state.game.gameState;\n  return {\n    gameStarted: !!game && game.round.phase.name !== 'initial',\n  };\n};\n\nexport default connect(mapStateToProps)(TopBarLinks);\n","import React, { FunctionComponent } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport useStyles from './TopBar.styles';\nimport TopBarTitle from '../TopBarTitle';\nimport TopBarLinks from '../TopBarLinks';\n\ntype Props = {\n  onToggleDrawer: () => void;\n};\n\nconst TopBar: FunctionComponent<Props> = ({ onToggleDrawer }) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"open drawer\"\n                  edge=\"start\"\n                  onClick={onToggleDrawer}\n                  className={classes.drawerButton}\n                >\n                  <MenuIcon />\n                </IconButton>\n              </Grid>\n              <Grid item>\n                <TopBarTitle />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <TopBarLinks />\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TopBar;\n","import { makeStyles } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(() => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Avataaar from 'avataaars';\n\nimport Emoji from '../Emoji';\nimport pluralize from '../../utils/pluralize';\nimport useStyles from './PlayerListItem.styles';\nimport { Avatar as AvatarType } from '../../store/game/types';\n\nexport type PlayerState =\n  | 'Ready'\n  | 'Thinking'\n  | 'Guessing'\n  | 'Drawing'\n  | 'Looking';\n\nexport type Props = {\n  name: string;\n  avatar: AvatarType;\n  points: number;\n  state?: PlayerState;\n};\n\nconst statusEmojis = {\n  Ready: '✅',\n  Looking: '👀',\n  Thinking: '🤔',\n  Guessing: '🕵️‍♂️',\n  Drawing: '✏️',\n};\n\nconst PlayerItem: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  points,\n  state,\n}) => {\n  const classes = useStyles();\n  return (\n    <ListItem divider>\n      <ListItemAvatar>\n        <Avatar variant=\"rounded\" alt={name} className={classes.avatar}>\n          <Avataaar\n            avatarStyle=\"Circle\"\n            topType={avatar.topType}\n            accessoriesType={avatar.accessoriesType}\n            hairColor={avatar.hairColor}\n            facialHairType={avatar.facialHairType}\n            clotheType={avatar.clotheType}\n            clotheColor={avatar.clotheColor}\n            eyeType={avatar.eyeType}\n            eyebrowType={avatar.eyebrowType}\n            mouthType={avatar.mouthType}\n            skinColor={avatar.skinColor}\n          />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={name}\n        secondary={`${points} ${pluralize('point', 'points', points)}`}\n      />\n      {state && (\n        <ListItemSecondaryAction>\n          <Typography variant=\"h5\">\n            <Emoji symbol={statusEmojis[state]} />\n          </Typography>\n        </ListItemSecondaryAction>\n      )}\n    </ListItem>\n  );\n};\n\nexport default PlayerItem;\n","import { connect } from 'react-redux';\nimport PlayerListItem, { PlayerState, Props } from './PlayerListItem';\nimport { RootState } from '../../store/reducers';\nimport { selectors } from '../../store/game';\nimport {\n  CreateEntryPhase,\n  EntryChoicePhase,\n  Player,\n} from '../../store/game/types';\nimport { MIN_PLAYERS } from '../../store/game/constants';\n\ntype OwnProps = {\n  id: string;\n};\n\nconst getPlayerState = (\n  state: RootState,\n  id: string,\n  isWaiting: boolean\n): PlayerState | undefined => {\n  if (!state.game.gameState || isWaiting) {\n    return;\n  }\n\n  const game = state.game.gameState;\n  const createdByCurrentPlayer = game.createdBy === id;\n  const numPlayers = Object.keys(game.players).length;\n\n  switch (game.round.phase.name) {\n    case 'initial':\n      if (createdByCurrentPlayer) {\n        return numPlayers >= MIN_PLAYERS ? 'Thinking' : 'Looking';\n      }\n      return 'Ready';\n    case 'conceptChoice': {\n      const hasChosen = !!game.round.concepts[id];\n      return hasChosen ? 'Ready' : 'Thinking';\n    }\n    case 'createEntry': {\n      if (selectors.playerHasSubmitted(state, id)) {\n        return 'Ready';\n      }\n\n      const createPhase = game.round.phase as CreateEntryPhase;\n      const isDrawingPhase = createPhase.index % 2 === 0;\n      return isDrawingPhase ? 'Drawing' : 'Guessing';\n    }\n    case 'entryChoice': {\n      const choicePhase = game.round.phase as EntryChoicePhase;\n      const playerInTurn = game.round.order[choicePhase.index];\n      const isPlayerTurn = playerInTurn === id;\n      const stack = game.round.stacks[id];\n      const alreadyChosen = !!stack.chosen;\n      const alreadyAcknowledged = !!choicePhase.acknowledgedBy[id];\n\n      if (alreadyAcknowledged) {\n        return 'Ready';\n      }\n\n      if (alreadyChosen) {\n        return isPlayerTurn ? 'Ready' : 'Looking';\n      }\n\n      return isPlayerTurn ? 'Thinking' : 'Looking';\n    }\n  }\n};\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps): Props => {\n  const player = selectors.player(state, ownProps.id) as Player;\n  const isWaiting = selectors.isWaiting(state, ownProps.id);\n\n  return {\n    ...player,\n    state: getPlayerState(state, ownProps.id, isWaiting),\n  };\n};\n\nexport default connect(mapStateToProps)(PlayerListItem);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport PlayerListItem from '../PlayerListItem';\nimport useStyles from './PlayerList.styles';\n\nexport type Props = {\n  visible: boolean;\n  playerIds: string[];\n  minPlayers: number;\n  maxPlayers: number;\n  gameStarted: boolean;\n};\n\nconst PlayerSkeleton: FunctionComponent = () => {\n  const classes = useStyles();\n  return (\n    <ListItem divider>\n      <ListItemAvatar>\n        <Skeleton\n          variant=\"circle\"\n          height={64}\n          width={64}\n          className={classes.avatar}\n        />\n      </ListItemAvatar>\n      <ListItemText\n        primary={<Skeleton variant=\"text\" width={100} />}\n        secondary={<Skeleton variant=\"text\" width={50} />}\n      />\n    </ListItem>\n  );\n};\n\nconst PlayerList: FunctionComponent<Props> = ({\n  visible,\n  playerIds,\n  minPlayers,\n  maxPlayers,\n  gameStarted,\n}) => {\n  if (!visible) {\n    return null;\n  }\n\n  const numPlayers = playerIds.length;\n  const remainingPlayers = Math.max(0, maxPlayers - numPlayers);\n  const skeletons = !gameStarted\n    ? Array.from(Array(remainingPlayers).keys()).map((index) => (\n        <PlayerSkeleton key={`skeleton_${index}`} />\n      ))\n    : [];\n  const getMessage = (): string => {\n    if (numPlayers < minPlayers) {\n      const needed = minPlayers - numPlayers;\n      return `${needed} needed`;\n    }\n    if (numPlayers === maxPlayers) {\n      return 'game full';\n    }\n    return `${numPlayers}/${maxPlayers}`;\n  };\n\n  return (\n    <List\n      subheader={<ListSubheader>Players - {`${getMessage()}`}</ListSubheader>}\n    >\n      {[\n        ...playerIds.map((id) => <PlayerListItem key={id} id={id} />),\n        ...skeletons,\n      ]}\n    </List>\n  );\n};\n\nexport default PlayerList;\n","import { connect } from 'react-redux';\nimport PlayerList, { Props } from './PlayerList';\nimport { RootState } from '../../store/reducers';\nimport { selectors } from '../../store/game';\nimport { MIN_PLAYERS, MAX_PLAYERS } from '../../store/game/constants';\n\nconst mapStateToProps = (state: RootState): Props => ({\n  visible: !!state.game.player,\n  playerIds: selectors.playerIds(state),\n  minPlayers: MIN_PLAYERS,\n  maxPlayers: MAX_PLAYERS,\n  gameStarted: Boolean(\n    state.game.gameState && state.game.gameState.round.phase.name !== 'initial'\n  ),\n});\n\nexport default connect(mapStateToProps)(PlayerList);\n","import React, { FunctionComponent } from 'react';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n\nimport PlayerListItem from '../PlayerListItem';\n\nexport type Props = {\n  visible: boolean;\n  playerIds: string[];\n};\n\nconst WaitingPlayerList: FunctionComponent<Props> = ({\n  visible,\n  playerIds,\n}) => {\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <List subheader={<ListSubheader>Waiting players</ListSubheader>}>\n      {playerIds.map((id) => (\n        <PlayerListItem key={id} id={id} />\n      ))}\n    </List>\n  );\n};\n\nexport default WaitingPlayerList;\n","import { connect } from 'react-redux';\nimport WaitingPlayerList, { Props } from './WaitingPlayerList';\nimport { RootState } from '../../store/reducers';\nimport { selectors } from '../../store/game';\n\nconst mapStateToProps = (state: RootState): Props => {\n  const game = state.game.gameState;\n  return {\n    visible: !!game && Object.keys(game.waitingPlayers).length > 0,\n    playerIds: selectors.waitingPlayerIds(state),\n  };\n};\n\nexport default connect(mapStateToProps)(WaitingPlayerList);\n","import React, { FunctionComponent } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport useStyles from './SideBar.styles';\nimport PlayerList, { WaitingPlayerList } from '../PlayerList';\n\ntype Props = {\n  drawerOpen: boolean;\n  onToggleDrawer: () => void;\n};\n\nconst SideBar: FunctionComponent<Props> = ({ drawerOpen, onToggleDrawer }) => {\n  const classes = useStyles();\n\n  const drawer = (\n    <React.Fragment>\n      <Toolbar />\n      <div className={classes.drawerContainer}>\n        <PlayerList />\n        <WaitingPlayerList />\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <React.Fragment>\n      <Hidden smUp implementation=\"css\">\n        <Drawer\n          variant=\"temporary\"\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          open={drawerOpen}\n          onClose={onToggleDrawer}\n          ModalProps={{\n            keepMounted: true,\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          variant=\"permanent\"\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n    </React.Fragment>\n  );\n};\n\nexport default SideBar;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import { useEffect, EffectCallback } from 'react';\n\nconst useMountEffect = (fn: EffectCallback): void => useEffect(fn, []);\n\nexport default useMountEffect;\n","import React, { useState, FunctionComponent } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport Menu from '../Menu';\nimport Game from '../Game';\nimport JoinMenu from '../JoinMenu';\nimport TopBar from '../TopBar';\nimport SideBar from '../SideBar';\nimport useStyles from './App.styles';\nimport useMountEffect from '../../utils/useMountEffect';\n\nexport type StateProps = {\n  playerName?: string;\n};\n\nexport type DispatchProps = {\n  connect: () => void;\n};\n\ntype Props = StateProps & DispatchProps;\n\nconst App: FunctionComponent<Props> = ({ playerName, connect }) => {\n  useMountEffect(() => {\n    connect();\n  });\n\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const onToggleDrawer = (): void => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <TopBar onToggleDrawer={onToggleDrawer} />\n      {playerName ? (\n        <SideBar drawerOpen={drawerOpen} onToggleDrawer={onToggleDrawer} />\n      ) : null}\n      <div className={classes.content}>\n        <Toolbar />\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\">\n              <Menu />\n            </Route>\n            <Route exact path=\"/game/:code\">\n              {playerName ? <Game /> : <JoinMenu />}\n            </Route>\n          </Switch>\n        </HashRouter>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from 'react-redux';\n\nimport App, { StateProps, DispatchProps } from './App';\nimport { AppDispatch } from '../../store';\nimport { connect as connectToSocket } from '../../store/socket';\nimport { subscribe } from '../../store/game';\nimport { RootState } from '../../store/reducers';\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  playerName: state.game.config.name,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch): DispatchProps => ({\n  connect: (): void => {\n    dispatch(\n      connectToSocket((socket) => {\n        subscribe(dispatch, socket);\n      })\n    );\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const LIVE_SERVER_SOCKET =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3001'\n    : 'https://api.doodle.saltares.com';\n","import { combineReducers } from '@reduxjs/toolkit';\nimport socket from './socket';\nimport game from './game';\n\nconst rootReducer = combineReducers({\n  socket,\n  game,\n});\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppGetState = typeof store.getState;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport App from './components/App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}