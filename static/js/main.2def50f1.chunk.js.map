{"version":3,"sources":["store/socket/index.ts","components/MainContent/MainContent.styles.ts","components/MainContent/MainContent.tsx","components/Emoji/Emoji.tsx","components/Menu/Menu.styles.ts","components/Menu/Menu.tsx","store/game/selectors.ts","store/game/index.ts","components/Menu/Menu.container.ts","components/InitialPhase/InitialPhase.tsx","utils/pluralize.ts","components/InitialPhase/InitialPhase.container.ts","components/ConceptListItem/ConceptListItem.tsx","components/ConceptChoicePhase/ConceptChoicePhase.tsx","components/ConceptChoicePhase/ConceptChoicePhase.container.ts","components/ToolBarButton/ToolBarButton.styles.ts","components/ToolBarButton/ToolBarButton.tsx","components/ExpandableToolBarButton/ExpandableToolBarButton.styles.ts","components/ExpandableToolBarButton/ExpandableToolBarButton.tsx","components/LineWidthPickerButton/LineWidthPickerButton.styles.ts","components/LineWidthPickerButton/LineWidthPickerButton.tsx","components/ColorPickerButton/ColorPickerButton.tsx","components/ToolPickerButton/ToolPickerButton.tsx","components/ToolBar/ToolBar.tsx","components/Editor/Editor.styled.ts","components/Editor/Editor.tsx","components/DrawPhase/DrawPhase.tsx","components/DrawPhase/DrawPhase.container.ts","components/GuessPhase/GuessPhase.styles.ts","components/GuessPhase/GuessPhase.tsx","components/GuessPhase/GuessPhase.container.ts","components/CreateEntryPhase/CreateEntryPhase.tsx","components/CreateEntryPhase/CreateEntryPhase.container.ts","components/EntryChoicePhase/EntryChoicePhase.styles.ts","components/EntryCard/EntryCard.styles.ts","components/EntryCard/EntryCard.tsx","components/DoodleEntryCard/DoodleEntryCard.tsx","components/DoodleEntryCard/DoodleEntryCard.container.ts","components/ConceptEntryCard/ConceptEntryCard.tsx","components/ConceptEntryCard/ConceptEntryCard.container.ts","components/EntryChoicePhase/EntryChoicePhase.tsx","components/EntryChoicePhase/EntryChoicePhase.container.ts","utils/useMountEffect.ts","components/Game/Game.tsx","components/Game/Game.container.ts","components/JoinMenu/JoinMenu.tsx","components/JoinMenu/JoinMenu.container.ts","components/TopBar/TopBar.styles.ts","components/TopBar/TopBar.tsx","components/SideBar/SideBar.styles.ts","components/PlayerListItem/PlayerListItem.styles.ts","components/PlayerListItem/PlayerListItem.tsx","components/PlayerListItem/PlayerListItem.container.ts","components/PlayerList/PlayerList.tsx","components/PlayerList/PlayerList.container.ts","components/SideBar/SideBar.tsx","components/App/App.styles.ts","components/App/App.tsx","components/App/App.container.ts","store/endpoints.ts","store/reducers.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["socket","useStyles","makeStyles","theme","paper","props","padding","spacing","maxWidth","width","MainContent","children","classes","Grid","item","xs","Paper","variant","className","container","direction","Emoji","symbol","label","role","aria-label","aria-hidden","buttonGroup","flex","button","withRouter","startGame","history","useState","mode","setMode","name","setName","code","setCode","hasName","length","hasGameCode","canStartGame","codeField","TextField","onChange","event","target","value","fullWidth","justify","ToggleButtonGroup","_event","newMode","exclusive","ToggleButton","Button","color","disabled","onClick","goToGame","push","socketSlice","createSlice","initialState","status","reducers","connectToSocketStarted","state","connectToSocketSuccess","connectToSocketFailed","disconnected","actions","reducer","socketDeferred","defer","playerIds","game","gameState","Object","keys","players","player","id","config","startingGame","choosingConcept","undefined","submittedEntry","acknowledgedWinner","gameSlice","setPlayerName","action","payload","setGamePlayer","chooseConcept","submitEntry","chooseEntry","chosenEntry","acknowledgeWinner","updateGame","lastUpdate","updateBy","joinGame","dispatch","a","connect","uuid","createGame","Menu","InitialPhase","message","startVisible","startDisabled","onStart","startButton","Typography","pluralize","singular","plural","count","getMessage","missingPlayers","createdBy","numPlayers","Math","max","createdGame","promise","emit","ConceptListItem","concept","selected","ListItem","divider","ListItemAvatar","ListItemText","primary","ConceptChoicePhase","concepts","selectedConcept","onChooseConcept","List","map","key","round","phase","playerId","choices","root","borderRadius","ToolBarButton","title","icon","Tooltip","placement","IconButton","ExpandableToolBarButton","renderContent","anchorEl","setAnchorEl","handleClose","open","Boolean","Fragment","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","close","height","marginTop","valueText","LineWidthPickerButton","lineWidth","onLineWidthChange","handleChange","_e","newValue","Array","isArray","Slider","getAriaValueText","valueLabelDisplay","step","min","ColorPickerButton","onColorChange","style","onChangeComplete","hex","handleOnChangeComplete","getIconForTool","tool","ToolPickerButton","onToolchange","newTool","ToolBar","onToolChange","canUndo","onUndo","canRedo","onRedo","onEraseAll","alignItems","SketchField","styled","SketchFieldBase","border","Editor","sketch","bind","onSketchChange","this","setState","undo","redo","clear","canUndoNow","canRedoNow","toDataURL","editorColor","ref","lineColor","React","Component","DrawPhase","submitted","onSubmit","editorRef","createRef","submittedMessage","editor","current","image","export","index","playerIdx","order","indexOf","sourceIdx","sourcePlayerId","stacks","entries","data","sourcePlayerName","lastEntry","author","hasSubmitted","drawing","entry","type","submitDrawing","GuessPhase","guess","setGuess","src","alt","previousEntry","getEntry","playerName","submitConcept","CreateEntryPhase","choicesContainer","img","avatar","backgroundColor","marginRight","EntryCard","content","CardHeader","Avatar","avatarStyle","topType","accessoriesType","hairColor","facialHairType","clotheType","clotheColor","eyeType","eyebrowType","mouthType","skinColor","wrapped","CardActionArea","Card","DoodleEntryCard","CardMedia","component","ownProps","ConceptEntryCard","CardContent","EntryChoicePhase","stackPlayerName","currentPlayerChooses","chosenPlayerName","acknowledged","onChooseEntry","onAcknowledge","drawingEntry","otherEntries","slice","elevation","entryCard","stackPlayerId","stack","chosenPlayerId","chosen","acknowledgeBy","includes","targetPlayer","useMountEffect","fn","useEffect","Game","connected","phaseName","_dispatch","getState","useParams","params","JoinMenu","appBar","zIndex","drawer","drawerButton","breakpoints","up","display","TopBar","onToggleDrawer","AppBar","position","Toolbar","edge","noWrap","flexShrink","drawerPaper","drawerContainer","overflow","statusEmojis","Ready","Thinking","Guessing","Drawing","PlayerItem","points","secondary","ListItemSecondaryAction","selectors","PlayerListItem","PlayerList","SideBar","drawerOpen","Hidden","smUp","implementation","Drawer","ModalProps","keepMounted","xsDown","flexGrow","App","setDrawerOpen","exact","path","subscribe","on","console","log","io","resolve","forEach","rootReducer","combineReducers","store","configureStore","devTools","process","window","location","hostname","match","ReactDOM","render","CssBaseline","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2def50f1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport io from 'socket.io-client';\nimport defer from 'p-defer';\nimport { AppDispatch } from '..';\nimport { SocketState } from \"./types\";\nimport { LIVE_SERVER_SOCKET } from '../endpoints';\n\nconst initialState: SocketState = {\n  status: 'disconnected',\n}\n\nconst socketSlice = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    connectToSocketStarted: state => {\n      state.status = 'connecting';\n    },\n    connectToSocketSuccess: (state) => {\n      state.status = 'connected';\n    },\n    connectToSocketFailed: state => {\n      state.status = 'error'\n    },\n    disconnected: state => {\n      state.status = 'disconnected';\n    },\n  }\n});\n\nconst { actions, reducer } = socketSlice;\n\nexport default reducer;\n\nexport let socket: SocketIOClient.Socket;\n\nexport const socketDeferred = defer<SocketIOClient.Socket>();\n\nexport const connect = (subscribe: (socket: SocketIOClient.Socket) => void) => async (dispatch: AppDispatch) => {\n  dispatch(actions.connectToSocketStarted());\n\n  socket = io(LIVE_SERVER_SOCKET);\n  socketDeferred.resolve(socket);\n\n  const successEvents = ['connect', 'reconnect'];\n  successEvents.forEach(event => {\n    socket.on(event, () => {\n      dispatch(actions.connectToSocketSuccess());\n      subscribe(socket);\n    });\n  });\n\n  const errorEvents = ['connect_error', 'connect_timeout', 'error', 'disconnected'];\n  errorEvents.forEach(event => {\n    socket.on(event, () => {\n      dispatch(actions.connectToSocketFailed());\n    });\n  });\n\n  socket.on('reconnecting', () => {\n    dispatch(actions.connectToSocketStarted());\n  });\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\ntype PaperProps = {\n  width: number,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: (props: PaperProps) => ({\n    padding: theme.spacing(3),\n    maxWidth: props.width,\n  }),\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport useStyles from './MainContent.styles';\n\ntype Props = {\n  width?: number,\n};\n\nconst MainContent: FunctionComponent<Props> = ({\n  children,\n  width = 500,\n}) => {\n  const classes = useStyles({ width });\n\n  return (\n    <Grid item xs={12}>\n      <Paper variant=\"outlined\" className={classes.paper}>\n        <Grid container direction=\"column\" spacing={2}>\n          {children}\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default MainContent;\n","import React, { FunctionComponent } from 'react';\n\ntype Props = {\n  symbol: string,\n  label?: string,\n}\n\nconst Emoji: FunctionComponent<Props> = ({\n  symbol,\n  label,\n}) => (\n  <span\n    role=\"img\"\n    aria-label={label}\n    aria-hidden={label ? 'false' : 'true'}\n  >\n    {symbol}\n  </span>\n);\n\nexport default Emoji;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  buttonGroup: {\n    flex: 1,\n  },\n  button: {\n    flex: 1,\n  }\n}));\n\nexport default useStyles;\n","import React, {\n  useState,\n  FunctionComponent,\n} from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport MainContent from '../MainContent';\nimport Emoji from '../Emoji';\nimport useStyles from './Menu.styles';\n\nexport type GameMode = 'newGame' | 'joinGame';\n\nexport type StartGameParams = {\n  mode: GameMode,\n  name: string,\n  code: string,\n  goToGame: (code: string) => any,\n}\n\ninterface Props extends RouteComponentProps<any> {\n  startGame: (params: StartGameParams) => void,\n}\n\nconst Menu: FunctionComponent<Props> = ({\n  startGame,\n  history,\n}) => {\n  const classes = useStyles();\n\n  const [mode, setMode] = useState('newGame');\n  const handleModeChange = (\n    (_event: any, newMode: string) => setMode(newMode)\n  );\n\n  const [name, setName] = useState('');\n  const handleNameChange = (\n    (event:React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\n  );\n\n  const [code, setCode] = useState('');\n  const handleGameCodeChange = (\n    (event:React.ChangeEvent<HTMLInputElement>) => setCode(event.target.value)\n  );\n\n  const handleGoClicked = () => startGame({\n    mode: mode as GameMode,\n    name,\n    code,\n    goToGame: (code: string) => history.push(`/game/${code}`),\n  });\n\n  const hasName = name.length > 0;\n  const hasGameCode = code.length > 0;\n  const canStartGame = hasName && (mode === 'newGame' || hasGameCode);\n\n  const codeField = mode === 'joinGame'\n    ? (\n      <Grid item xs={12}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Game code\"\n          onChange={handleGameCodeChange}\n          fullWidth\n        />\n      </Grid>\n    )\n    : null;\n\n  return (\n    <MainContent>\n      <Grid item xs={12}>\n        <Grid container direction=\"row\" justify=\"center\">\n          <ToggleButtonGroup\n            value={mode}\n            onChange={handleModeChange}\n            exclusive\n            aria-label=\"game mode\"\n            className={classes.buttonGroup}\n          >\n            <ToggleButton value=\"newGame\" className={classes.button}>\n              <Emoji symbol=\"✏️\"/>\n              New Game\n            </ToggleButton>\n            <ToggleButton value=\"joinGame\" className={classes.button}>\n              <Emoji symbol=\"👥\"/>\n              <span>Join Game</span>\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          value={name}\n          onChange={handleNameChange}\n          fullWidth\n        />\n      </Grid>\n      {codeField}\n      <Grid item xs={12}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!canStartGame}\n          onClick={handleGoClicked}\n        >\n          <Emoji symbol=\"🙌\"/>\n          <span>Go!</span>\n        </Button>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default withRouter(Menu);\n","import { RootState } from \"../reducers\";\nimport { Player } from \"./types\";\n\nexport const playerIds = (state: RootState): string[] => {\n  if (!state.game.gameState) {\n    return [];\n  }\n  return Object.keys(state.game.gameState.players);\n};\n\nexport const player = (state: RootState, id: string): Player | null => {\n  if (!state.game.gameState) {\n    return null;\n  }\n  return state.game.gameState.players[id];\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from 'uuid';\nimport { AppDispatch, AppGetState } from '..';\nimport { socketDeferred } from '../socket';\nimport {\n  GameSliceState,\n  CreateGameParams,\n  GameJoinedEvent,\n  GameUpdatedEvent,\n  JoinGameParams,\n} from \"./types\";\nimport * as selectors from './selectors';\n\nconst initialState: GameSliceState = {\n  config: {},\n  startingGame: false,\n  choosingConcept: undefined,\n  submittedEntry: false,\n  acknowledgedWinner: false,\n}\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setPlayerName: (state, action: PayloadAction<string>) => {\n      state.config.name = action.payload;\n    },\n    setCode: (state, action: PayloadAction<string>) => {\n      state.config.code = action.payload;\n    },\n    setGamePlayer: (state, action: PayloadAction<GameJoinedEvent>) => {\n      state.player = action.payload.player;\n    },\n    startGame: (state) => {\n      state.startingGame = true;\n    },\n    chooseConcept: (state, action: PayloadAction<string>) => {\n      state.choosingConcept = action.payload;\n    },\n    submitEntry: (state) => {\n      state.submittedEntry = true;\n    },\n    chooseEntry: (state, action: PayloadAction<string>) => {\n      state.chosenEntry = action.payload;\n    },\n    acknowledgeWinner: (state) => {\n      state.acknowledgedWinner = true;\n    },\n    updateGame: (state, action: PayloadAction<GameUpdatedEvent>) => {\n      if (state.gameState && state.gameState.lastUpdate > action.payload.gameState.lastUpdate) {\n        return state;\n      }\n      state.gameState = action.payload.gameState;\n\n      if (action.payload.updateBy === state.player) {\n        state.startingGame = false;\n        state.choosingConcept = undefined;\n        state.submittedEntry = false;\n        state.chosenEntry = undefined;\n        state.acknowledgedWinner = false;\n      }\n    },\n  },\n});\n\nconst { actions, reducer } = gameSlice;\n\nexport default reducer;\n\nexport const subscribe = (dispatch: AppDispatch, socket: SocketIOClient.Socket) => {\n  socket.on('connectedToGame', (event: GameJoinedEvent) => {\n    console.log('connectedToGame:', event);\n    dispatch(actions.setGamePlayer(event));\n  });\n\n  socket.on('gameUpdated', (event: GameUpdatedEvent) => {\n    console.log('gameUpdated:', event);\n    dispatch(actions.updateGame(event));\n  });\n};\n\nexport const createGame = (\n  { name, goToGame }: CreateGameParams,\n)=> async (dispatch: AppDispatch) => {\n  const code = uuid();\n  dispatch(joinGame({ code, name, goToGame }));\n};\n\nexport const joinGame = (\n  { code, name, goToGame }: JoinGameParams,\n)=> async (dispatch: AppDispatch) => {\n  dispatch(actions.setPlayerName(name));\n  dispatch(actions.setCode(code));\n  goToGame(code);\n};\n\nexport const connectToGameChannel = () => async (\n  _dispatch: AppDispatch,\n  getState: AppGetState,\n) => {\n  const { game: { config: { name, code } } } = getState();\n  const socket = await socketDeferred.promise;\n  socket.emit('joinGame', { name, code });\n};\n\nexport const startGame = () => async (\n  dispatch: AppDispatch,\n) => {\n  dispatch(actions.startGame());\n  const socket = await socketDeferred.promise;\n  socket.emit('startGame', {});\n};\n\nexport const chooseConcept = (concept: string) => async (\n  dispatch: AppDispatch,\n) => {\n  dispatch(actions.chooseConcept(concept));\n  const socket = await socketDeferred.promise;\n  socket.emit('chooseConcept', { concept });\n};\n\nexport const submitDrawing = (drawing: string) => async (\n  dispatch: AppDispatch,\n) => {\n  dispatch(actions.submitEntry());\n  const socket = await socketDeferred.promise;\n  socket.emit('submitEntry', {\n    entry: { type: 'drawing', drawing }\n  });\n};\n\nexport const submitConcept = (concept: string) => async (\n  dispatch: AppDispatch,\n) => {\n  dispatch(actions.submitEntry());\n  const socket = await socketDeferred.promise;\n  socket.emit('submitEntry', {\n    entry: { type: 'concept', concept }\n  });\n};\n\nexport const chooseEntry = (targetPlayer: string) => async(\n  dispatch: AppDispatch,\n) => {\n  dispatch(actions.chooseEntry(targetPlayer));\n  const socket = await socketDeferred.promise;\n  socket.emit('chooseEntry', { targetPlayer });\n};\n\nexport const acknowledgeWinner = () => async(\n  dispatch: AppDispatch,\n) => {\n  dispatch(actions.acknowledgeWinner());\n  const socket = await socketDeferred.promise;\n  socket.emit('acknowledgeWinner', {});\n};\n\nexport { selectors };\n","import { connect } from 'react-redux';\n\nimport Menu, { StartGameParams } from './Menu';\nimport { AppDispatch } from '../../store';\nimport { createGame, joinGame } from '../../store/game';\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  startGame: ({ mode, name, code, goToGame }: StartGameParams) => {\n    if (mode === 'newGame') {\n      dispatch(createGame({ name, goToGame }));\n    } else {\n      dispatch(joinGame({ name, code, goToGame }));\n    }\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Menu);\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport MainContent from '../MainContent';\nimport Emoji from '../Emoji';\n\ntype Props = {\n  message: string,\n  startVisible: boolean,\n  startDisabled: boolean,\n  onStart: () => void,\n};\n\nconst InitialPhase: FunctionComponent<Props> = ({\n  message,\n  startVisible,\n  startDisabled,\n  onStart,\n}) => {\n  const startButton = startVisible\n    ? (\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={startDisabled}\n        onClick={onStart}\n      >\n        <Emoji symbol=\"🚀\" />\n        <span>Start!</span>\n      </Button>\n    )\n    : null;\n\n  return (\n    <MainContent>\n      <Grid item xs={12}>\n        <Typography>{message}</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        {startButton}\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default InitialPhase;\n","\nconst pluralize = (singular: string, plural: string, count: number): string => (\n  count === 1 ? singular : plural\n);\n\nexport default pluralize;\n","import { connect } from 'react-redux';\nimport { AppDispatch } from '../../store';\nimport InitialPhase from './InitialPhase';\nimport { RootState } from '../../store/reducers';\nimport { GameState, Player } from '../../store/game/types';\nimport pluralize from '../../utils/pluralize';\nimport { startGame } from '../../store/game';\n\nconst MIN_PLAYERS = 2;\n\nconst getMessage = (\n  missingPlayers: number,\n  createdBy: Player,\n  player: string,\n) => {\n  if (missingPlayers > 0) {\n    return `Waiting for ${missingPlayers} more ${pluralize('player', 'players', missingPlayers)}`;\n  }\n  const createdGame = createdBy.id === player;\n  if (createdGame) {\n    return 'Ready to start?';\n  }\n  return `Waiting for ${createdBy.name} to start the game`;\n}\n\nconst mapStateToProps = (state: RootState) => {\n  const game = state.game.gameState as GameState;\n  const player = state.game.player as string;\n  const numPlayers = Object.keys(game.players).length;\n  const missingPlayers = Math.max(0, MIN_PLAYERS - numPlayers);\n  const createdBy = game.players[game.createdBy];\n  const createdGame = createdBy.id === player;\n\n  return {\n    message: getMessage(missingPlayers, createdBy, player),\n    startVisible: createdGame,\n    startDisabled: missingPlayers > 0,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onStart: () => dispatch(startGame()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(InitialPhase);\n","import React, {\n  FunctionComponent,\n  MouseEvent,\n} from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nimport Emoji from '../Emoji';\n\ntype Props = {\n  concept: string,\n  selected?: boolean,\n  disabled?: boolean,\n  onClick: (event: MouseEvent<HTMLElement>) => void,\n}\n\nconst ConceptListItem: FunctionComponent<Props> = ({\n  concept,\n  selected = false,\n  disabled = false,\n  onClick,\n}) => (\n  <ListItem\n    divider\n    button\n    onClick={onClick}\n    selected={selected}\n    disabled={disabled}\n  >\n    <ListItemAvatar>\n      <Emoji symbol=\"💡\" />\n    </ListItemAvatar>\n    <ListItemText primary={concept}/>\n  </ListItem>\n);\n\nexport default ConceptListItem;\n","import React, { FunctionComponent } from 'react';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport MainContent from '../MainContent';\nimport ConceptListItem from '../ConceptListItem';\n\ntype Props = {\n  concepts: string[],\n  selectedConcept?: string,\n  onChooseConcept: (concept: string) => void,\n};\n\nconst ConceptChoicePhase: FunctionComponent<Props> = ({\n  concepts,\n  selectedConcept,\n  onChooseConcept,\n}) => {\n  const message = selectedConcept\n    ? 'Waiting for other players to choose'\n    : 'Choose a concept';\n\n  return (\n    <MainContent>\n      <Grid item xs={12}>\n        <Typography>{message}</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <List>\n          {\n            concepts.map(concept => (\n              <ConceptListItem\n                key={concept}\n                concept={concept}\n                selected={selectedConcept === concept}\n                disabled={!!selectedConcept}\n                onClick={() => onChooseConcept(concept)}\n              />\n            ))\n          }\n        </List>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default ConceptChoicePhase;\n","import { connect } from 'react-redux';\n\nimport ConceptChoicePhase from './ConceptChoicePhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { chooseConcept } from '../../store/game';\nimport {\n  ConceptChoicePhase as ConceptChoicePhaseType,\n  Round,\n} from '../../store/game/types';\n\nconst mapStateToProps = (state: RootState) => {\n  const choosingConcept = state.game.choosingConcept;\n  const round = state.game.gameState?.round as Round;\n  const phase = round.phase as ConceptChoicePhaseType;\n  const playerId = state.game.player as string;\n  const concepts = phase.choices[playerId];\n  const selectedConcept = round.concepts[playerId];\n\n  return {\n    selectedConcept: selectedConcept || choosingConcept,\n    concepts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onChooseConcept: (concept: string) => dispatch(chooseConcept(concept)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ConceptChoicePhase);\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // border: '1px solid',\n    borderRadius: 4,\n  },\n}));\n\nexport default useStyles;\n","import React, {\n  ReactNode,\n  FunctionComponent,\n  MouseEvent,\n} from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport useStyles from './ToolBarButton.styles';\n\ntype Props = {\n  title: string,\n  icon: ReactNode,\n  onClick: (event: MouseEvent<HTMLElement>) => void,\n  disabled?: boolean,\n}\n\nconst ToolBarButton: FunctionComponent<Props> = ({\n  title,\n  icon,\n  disabled = false,\n  onClick,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Tooltip title={title} placement=\"left\">\n      <span>\n        <IconButton\n          aria-label={title}\n          onClick={onClick}\n          disabled={disabled}\n          classes={{\n            root: classes.root,\n          }}\n        >\n          {icon}\n        </IconButton>\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default ToolBarButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import React, {\n  useState,\n  FunctionComponent,\n  MouseEvent,\n  ReactNode,\n} from 'react';\n\nimport Popover from '@material-ui/core/Popover';\n\nimport ToolBarButton from '../ToolBarButton';\nimport useStyles from './ExpandableToolBarButton.styles';\n\ntype RenderContentProps = {\n  close: () => void,\n}\n\ntype Props = {\n  title: string,\n  icon: ReactNode,\n  renderContent: (props: RenderContentProps) => ReactNode,\n}\n\nconst ExpandableToolBarButton: FunctionComponent<Props> = ({\n  title,\n  icon,\n  renderContent,\n}) => {\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const handleClick = (event: MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => setAnchorEl(null);\n\n  const open = Boolean(anchorEl);\n  const id = open ? `${title}-popover` : undefined;\n\n  return (\n    <React.Fragment>\n      <ToolBarButton\n        title={title}\n        icon={icon}\n        onClick={handleClick}\n      />\n      <Popover\n        id={id}\n        classes={{\n          paper: classes.paper,\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: 'left',\n        }}\n      >\n        {renderContent({ close: handleClose })}\n      </Popover>\n    </React.Fragment>\n  );\n};\n\nexport default ExpandableToolBarButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flex: 1,\n    width: 200,\n    height: 25,\n    marginTop: 18,\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\n\nimport Slider from '@material-ui/core/Slider';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nimport ExpandableToolBarButton from '../ExpandableToolBarButton';\nimport useStyles from './LineWidthPickerButton.styles';\n\ntype Props = {\n  lineWidth: number,\n  onLineWidthChange: (width: number) => void,\n}\n\nconst valueText = (value: number): string => `${value} px`;\n\nconst LineWidthPickerButton: FunctionComponent<Props> = ({\n  lineWidth,\n  onLineWidthChange,\n}) => {\n  const classes = useStyles();\n\n  const handleChange = (\n    _e: any,\n    newValue: number | number[],\n  ) => onLineWidthChange(Array.isArray(newValue) ? newValue[0] : newValue);\n\n  return (\n    <ExpandableToolBarButton\n      title=\"Line width\"\n      icon={<FiberManualRecordIcon />}\n      renderContent={() => (\n        <div className={classes.root}>\n          <Slider\n            value={lineWidth}\n            getAriaValueText={valueText}\n            valueLabelDisplay=\"on\"\n            step={1}\n            min={1}\n            max={50}\n            onChange={handleChange}\n          />\n        </div>\n      )}\n    />\n  );\n};\n\nexport default LineWidthPickerButton;\n","import React, { FunctionComponent } from 'react';\n\nimport { CirclePicker, ColorResult } from 'react-color';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nimport ExpandableToolBarButton from '../ExpandableToolBarButton';\n\ntype Props = {\n  color: string,\n  onColorChange: (color: string) => void,\n}\n\nconst ColorPickerButton: FunctionComponent<Props> = ({\n  color,\n  onColorChange,\n}) => {\n  const handleOnChangeComplete = (color: ColorResult) => onColorChange(color.hex);\n\n  return (\n    <ExpandableToolBarButton\n      title=\"Color\"\n      icon={<FiberManualRecordIcon style={{ color }}/>}\n      renderContent={({ close }) => (\n        <CirclePicker\n          color={color}\n          onChangeComplete={(color) => {\n            close();\n            handleOnChangeComplete(color);\n          }}\n        />\n      )}\n    />\n  );\n};\n\nexport default ColorPickerButton;\n","import React, { FunctionComponent } from 'react';\n\nimport CreateIcon from '@material-ui/icons/Create';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport ExpandableToolBarButton from '../ExpandableToolBarButton';\n\ntype Tool = 'pencil' | 'eraser'\n\ntype Props = {\n  tool: Tool,\n  onToolchange: (tool: Tool) => void,\n}\n\nconst getIconForTool = (tool: Tool) => (\n  tool === 'pencil'\n    ? <CreateIcon />\n    : <ClearIcon />\n);\n\nconst ToolPickerButton: FunctionComponent<Props> = ({\n  tool,\n  onToolchange,\n}) => (\n  <ExpandableToolBarButton\n    title=\"Color\"\n    icon={getIconForTool(tool)}\n    renderContent={({ close }) => (\n      <ToggleButtonGroup\n        value={tool}\n        exclusive\n        onChange={(_event, newTool) => {\n          close();\n          onToolchange(newTool)\n        }}\n        aria-label=\"text alignment\"\n      >\n        <ToggleButton value=\"pencil\" aria-label=\"pencil\">\n          <CreateIcon />\n        </ToggleButton>\n        <ToggleButton value=\"eraser\" aria-label=\"eraser\">\n          <ClearIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    )}\n  />\n);\n\nexport default ToolPickerButton;\n","import React, { FunctionComponent } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport ToolBarButton from '../ToolBarButton';\nimport LineWidthPickerButton from '../LineWidthPickerButton';\nimport ColorPickerButton from '../ColorPickerButton';\nimport ToolPickerButton from '../ToolPickerButton';\n\nexport type Tool = 'pencil' | 'eraser'\n\ntype Props = {\n  lineWidth?: number,\n  onLineWidthChange: (width: number) => void,\n  color?: string,\n  onColorChange: (color: string) => void,\n  tool?: Tool\n  onToolChange: (tool: Tool) => void,\n  canUndo?: boolean,\n  onUndo: () => void,\n  canRedo?: boolean,\n  onRedo: () => void,\n  onEraseAll: () => void,\n}\n\nconst ToolBar: FunctionComponent<Props> = ({\n  lineWidth = 5,\n  onLineWidthChange,\n  color = '#f44336',\n  onColorChange,\n  tool = 'pencil',\n  onToolChange,\n  canUndo = false,\n  onUndo,\n  canRedo = false,\n  onRedo,\n  onEraseAll,\n}) => (\n  <Grid\n    container\n    direction=\"column\"\n    spacing={0}\n    alignItems=\"center\"\n  >\n    <LineWidthPickerButton\n      lineWidth={lineWidth}\n      onLineWidthChange={onLineWidthChange}\n    />\n    <ColorPickerButton\n      color={color}\n      onColorChange={onColorChange}\n    />\n    <ToolPickerButton\n      tool={tool}\n      onToolchange={onToolChange}\n    />\n    <ToolBarButton\n      title=\"Undo\"\n      icon={<UndoIcon />}\n      onClick={onUndo}\n      disabled={!canUndo}\n    />\n    <ToolBarButton\n      title=\"Redo\"\n      icon={<RedoIcon />}\n      onClick={onRedo}\n      disabled={!canRedo}\n    />\n    <ToolBarButton\n      title=\"Erase all\"\n      icon={<DeleteIcon />}\n      onClick={onEraseAll}\n    />\n  </Grid>\n);\n\nexport default ToolBar;\n","import { styled } from '@material-ui/core/styles';\nimport { SketchField as SketchFieldBase } from 'react-sketch';\n\nexport const SketchField = styled(SketchFieldBase)({\n  border: '1px solid',\n  borderRadius: 4,\n});\n\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport ToolBar from '../ToolBar';\nimport { SketchField } from './Editor.styled';\n\ntype Tool = 'pencil' | 'eraser'\ntype Props = {}\ntype State = {\n  lineWidth: number,\n  color: string,\n  tool: Tool\n  canUndo: boolean,\n  canRedo: boolean,\n}\n\nclass Editor extends React.Component<Props, State> {\n  private sketch: any;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      lineWidth: 10,\n      color: '#f44336',\n      tool: 'pencil',\n      canUndo: false,\n      canRedo: false,\n    };\n\n    this.onLineWidthChange = this.onLineWidthChange.bind(this);\n    this.onColorChange = this.onColorChange.bind(this);\n    this.onToolChange = this.onToolChange.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.onRedo = this.onRedo.bind(this);\n    this.onEraseAll = this.onEraseAll.bind(this);\n    this.onSketchChange = this.onSketchChange.bind(this);\n  }\n\n  onLineWidthChange(lineWidth: number) {\n    this.setState({ lineWidth });\n  }\n\n  onColorChange(color: string) {\n    this.setState({ color });\n  }\n\n  onToolChange(tool: Tool) {\n    this.setState({ tool });\n  }\n\n  onUndo() {\n    if (!this.sketch) {\n      return;\n    }\n    this.sketch.undo();\n  }\n\n  onRedo() {\n    if (!this.sketch) {\n      return;\n    }\n    this.sketch.redo();\n  }\n\n  onEraseAll() {\n    if (!this.sketch) {\n      return;\n    }\n    this.sketch.clear();\n  }\n\n  onSketchChange() {\n    if (!this.sketch) {\n      return;\n    }\n\n    const { canUndo, canRedo } = this.state;\n    const canUndoNow = this.sketch.canUndo();\n    const canRedoNow = this.sketch.canRedo();\n    const needsUpdate = canUndo !== canUndoNow || canRedo !== canRedoNow;\n    if (needsUpdate) {\n      this.setState({\n        canUndo: canUndoNow,\n        canRedo: canRedoNow,\n      });\n    }\n  }\n\n  export(): string {\n    if (!this.sketch) {\n      return '';\n    }\n    return this.sketch.toDataURL();\n  }\n\n  render() {\n    const {\n      lineWidth,\n      color,\n      tool,\n      canUndo,\n      canRedo,\n    } = this.state;\n\n    const editorColor = tool === 'pencil' ? color : '#ffffff';\n\n    return (\n      <Grid container direction=\"row\">\n        <Grid item xs={2}>\n          <ToolBar\n            lineWidth={lineWidth}\n            onLineWidthChange={this.onLineWidthChange}\n            color={color}\n            onColorChange={this.onColorChange}\n            tool={tool}\n            onToolChange={this.onToolChange}\n            canUndo={canUndo}\n            onUndo={this.onUndo}\n            canRedo={canRedo}\n            onRedo={this.onRedo}\n            onEraseAll={this.onEraseAll}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <SketchField\n            ref={(sketch: any) => this.sketch = sketch}\n            height='480px'\n            tool={tool}\n            lineColor={editorColor}\n            lineWidth={lineWidth}\n            onChange={this.onSketchChange}\n          />\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default Editor;\n","import React, {\n  FunctionComponent,\n  createRef,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport MainContent from '../MainContent';\nimport Editor from '../Editor';\nimport Emoji from '../Emoji';\n\ntype Props = {\n  message: string,\n  submitted: boolean,\n  onSubmit: (image: string) => void,\n};\n\nconst DrawPhase: FunctionComponent<Props> = ({\n  message,\n  submitted,\n  onSubmit,\n}) => {\n  const editorRef = createRef<Editor>();\n  const handleSubmitClicked = () => {\n    const editor = editorRef.current;\n    if (editor) {\n      const image = editor.export();\n      onSubmit(image);\n    }\n  };\n\n  const submittedMessage = submitted\n    ? 'Waiting for other players to finish their turn.'\n    : '';\n\n  return (\n    <MainContent width={800}>\n      <Grid item xs={12}>\n        <Typography>{message}</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Editor ref={editorRef}/>\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSubmitClicked}\n              disabled={submitted}\n            >\n              <Emoji symbol=\"🎨\"/>\n              <span>Done</span>\n            </Button>\n          </Grid>\n          <Grid item>\n            <Typography>{submittedMessage}</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default DrawPhase;\n","import { connect } from 'react-redux';\n\nimport DrawPhase from './DrawPhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { submitDrawing } from '../../store/game';\nimport {\n  GameState,\n  CreateEntryPhase,\n  ConceptEntry,\n} from '../../store/game/types';\n\nconst getMessage = (playerId: string, game: GameState) => {\n  const phase = game.round.phase as CreateEntryPhase;\n  if (phase.index === 0) {\n    const concept = game.round.concepts[playerId];\n    return `Draw \"${concept}\"`;\n  }\n\n  const playerIdx = game.round.order.indexOf(playerId);\n  const numPlayers = Object.keys(game.players).length;\n  const sourceIdx = (playerIdx + phase.index) % numPlayers;\n  const sourcePlayerId = game.round.order[sourceIdx];\n  const stack = game.round.stacks[sourcePlayerId];\n  const lastEntry = stack.entries[phase.index - 1];\n  const conceptEntry = lastEntry.data as ConceptEntry;\n  const concept = conceptEntry.concept;\n  const sourcePlayerName = game.players[sourcePlayerId].name;\n  return `From ${sourcePlayerName}, draw \"${concept}\"`;\n};\n\nconst hasSubmitted = (playerId: string, game: GameState) => {\n  const phase = game.round.phase as CreateEntryPhase;\n  const playerIdx = game.round.order.indexOf(playerId);\n  const numPlayers = Object.keys(game.players).length;\n  const sourceIdx = (playerIdx + phase.index) % numPlayers;\n  const sourcePlayerId = game.round.order[sourceIdx];\n  const stack = game.round.stacks[sourcePlayerId];\n  const lastEntry = stack.entries[phase.index];\n  return lastEntry && lastEntry.author === playerId;\n};\n\nconst mapStateToProps = (state: RootState) => {\n  const playerId = state.game.player as string;\n  const game = state.game.gameState as GameState;\n  const message = getMessage(playerId, game);\n  const submitted = state.game.submittedEntry || hasSubmitted(playerId, game);\n  return {\n    submitted,\n    message,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSubmit: (drawing: string) => dispatch(submitDrawing(drawing)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(DrawPhase);\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  image: {\n    width: 400,\n    borderRadius: 4,\n  }\n}));\n\nexport default useStyles;\n","import React, {\n  FunctionComponent,\n  useState,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport useStyles from './GuessPhase.styles';\nimport Emoji from '../Emoji';\nimport MainContent from '../MainContent';\n\ntype Props = {\n  message: string,\n  image: string,\n  submitted: boolean,\n  onSubmit: (image: string) => void,\n};\n\nconst GuessPhase: FunctionComponent<Props> = ({\n  message,\n  image,\n  submitted,\n  onSubmit,\n}) => {\n  const classes = useStyles();\n  const [guess, setGuess] = useState('');\n  const handleGuessChanged = (\n    (event:React.ChangeEvent<HTMLInputElement>) => setGuess(event.target.value)\n  )\n  const handleSubmitClicked = () => {\n    onSubmit(guess);\n  };\n\n  const submittedMessage = submitted\n    ? 'Waiting for other players to finish their turn.'\n    : '';\n\n  return (\n    <MainContent width={800}>\n      <Grid item xs={12}>\n        <Typography>{message}</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <img src={image} alt={message} className={classes.image} />\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Guess\"\n          value={guess}\n          onChange={handleGuessChanged}\n          disabled={submitted}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSubmitClicked}\n              disabled={submitted}\n            >\n              <Emoji symbol=\"🎨\"/>\n              <span>Done</span>\n            </Button>\n          </Grid>\n          <Grid item>\n            <Typography>{submittedMessage}</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default GuessPhase;\n","import { connect } from 'react-redux';\n\nimport GuessPhase from './GuessPhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport { submitConcept } from '../../store/game';\nimport {\n  GameState,\n  CreateEntryPhase,\n  DrawingEntry,\n} from '../../store/game/types';\n\nconst getEntry = (playerId: string, game: GameState) => {\n  const phase = game.round.phase as CreateEntryPhase;\n  const playerIdx = game.round.order.indexOf(playerId);\n  const numPlayers = Object.keys(game.players).length;\n  const sourceIdx = (playerIdx + phase.index) % numPlayers;\n  const sourcePlayerId = game.round.order[sourceIdx];\n  const stack = game.round.stacks[sourcePlayerId];\n  const previousEntry = stack.entries[phase.index - 1];\n  const entry = previousEntry.data as DrawingEntry;\n  return {\n    author: previousEntry.author,\n    entry,\n  };\n};\n\nconst hasSubmitted = (playerId: string, game: GameState) => {\n  const phase = game.round.phase as CreateEntryPhase;\n  const playerIdx = game.round.order.indexOf(playerId);\n  const numPlayers = Object.keys(game.players).length;\n  const sourceIdx = (playerIdx + phase.index) % numPlayers;\n  const sourcePlayerId = game.round.order[sourceIdx];\n  const stack = game.round.stacks[sourcePlayerId];\n  const lastEntry = stack.entries[phase.index];\n  return lastEntry && lastEntry.author === playerId;\n};\n\nconst mapStateToProps = (state: RootState) => {\n  const playerId = state.game.player as string;\n  const game = state.game.gameState as GameState;\n  const {\n    author,\n    entry,\n  } = getEntry(playerId, game);\n  const playerName = game.players[author].name;\n  const message = `Guess what ${playerName} drew`;\n  const submitted = state.game.submittedEntry || hasSubmitted(playerId, game);\n  return {\n    submitted,\n    message,\n    image: entry.drawing,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSubmit: (concept: string) => dispatch(submitConcept(concept)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GuessPhase);\n","import React, { FunctionComponent } from 'react';\n\nimport DrawPhase from '../DrawPhase';\nimport GuessPhase from '../GuessPhase';\n\nexport type EntryType = 'draw' | 'guess';\n\ntype Props = {\n  type: EntryType,\n};\n\nconst CreateEntryPhase: FunctionComponent<Props> = ({\n  type,\n}) => (\n  type === 'draw'\n    ? <DrawPhase />\n    : <GuessPhase />\n);\n\nexport default CreateEntryPhase;\n","import { connect } from 'react-redux';\n\nimport CreateEntryPhase, { EntryType } from './CreateEntryPhase';\nimport { RootState } from '../../store/reducers';\nimport { CreateEntryPhase as CreateEntryPhaseType } from '../../store/game/types';\n\nconst mapStateToProps = (state: RootState) => {\n  const phase = state.game.gameState?.round.phase as CreateEntryPhaseType;\n  const type: EntryType = phase.index % 2 === 0\n    ? 'draw'\n    : 'guess'\n\n  return { type };\n};\n\nexport default connect(mapStateToProps)(CreateEntryPhase);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(3),\n    maxWidth: 500,\n  },\n  choicesContainer: {\n    padding: theme.spacing(3),\n    maxWidth: 500,\n  },\n  img: {\n    width: '100%',\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, {\n  FunctionComponent,\n  ReactNode\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Avatar from '@material-ui/core/Avatar';\nimport Avataaar from 'avataaars';\n\nimport { Avatar as AvatarType } from '../../store/game/types';\nimport useStyles from './EntryCard.styles';\n\ntype Props = {\n  name: string,\n  avatar: AvatarType,\n  entry: ReactNode,\n  onClick?: () => void,\n}\n\nconst EntryCard: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  entry,\n  onClick,\n}) => {\n  const classes = useStyles();\n\n  const content = [\n    <CardHeader\n      avatar={(\n        <Avatar variant=\"rounded\" alt={name} className={classes.avatar}>\n          <Avataaar\n            avatarStyle=\"Circle\"\n            topType={avatar.topType}\n            accessoriesType={avatar.accessoriesType}\n            hairColor={avatar.hairColor}\n            facialHairType={avatar.facialHairType}\n            clotheType={avatar.clotheType}\n            clotheColor={avatar.clotheColor}\n            eyeType={avatar.eyeType}\n            eyebrowType={avatar.eyebrowType}\n            mouthType={avatar.mouthType}\n            skinColor={avatar.skinColor}\n          />\n        </Avatar>\n      )}\n      title={name}\n    />,\n    entry,\n  ];\n  const wrapped = onClick\n    ? (<CardActionArea>{content}</CardActionArea>)\n    : content;\n\n  return (\n    <Grid item xs={12}>\n      <Card onClick={onClick}>\n        {wrapped}\n      </Card>\n    </Grid>\n  );\n}\n\nexport default EntryCard;\n","import React, { FunctionComponent } from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport EntryCard from '../EntryCard';\nimport { Avatar } from '../../store/game/types';\n\ntype Props = {\n  name: string,\n  avatar: Avatar,\n  image: string,\n  onClick?: () => void,\n}\n\nconst DoodleEntryCard: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  image,\n  onClick,\n}) => (\n  <EntryCard\n    name={name}\n    avatar={avatar}\n    entry={(\n      <CardMedia\n        component=\"img\"\n        image={image}\n        width=\"500\"\n        title={`Entry by ${name}`}\n      />\n    )}\n    onClick={onClick}\n  />\n);\n\nexport default DoodleEntryCard;\n","import { connect } from 'react-redux';\n\nimport DoodleEntryCard from './DoodleEntryCard';\nimport { RootState } from '../../store/reducers';\nimport { GameState } from '../../store/game/types';\n\ninterface OwnProps {\n  playerId: string,\n};\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps) => {\n  const game = state.game.gameState as GameState;\n  const player = game.players[ownProps.playerId];\n  return {\n    name: player.name,\n    avatar: player.avatar,\n  };\n}\nexport default connect(mapStateToProps)(DoodleEntryCard);\n","import React, { FunctionComponent } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport EntryCard from '../EntryCard';\nimport { Avatar } from '../../store/game/types';\n\n\ntype Props = {\n  name: string,\n  avatar: Avatar,\n  concept: string,\n  onClick?: () => void,\n}\n\nconst ConceptEntryCard: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  concept,\n  onClick,\n}) => (\n  <EntryCard\n    name={name}\n    avatar={avatar}\n    entry={(\n      <CardContent>\n        <Typography variant=\"h4\">{concept}</Typography>\n      </CardContent>\n    )}\n    onClick={onClick}\n  />\n);\n\nexport default ConceptEntryCard;\n","import { connect } from 'react-redux';\n\nimport ConceptEntryCard from './ConceptEntryCard';\nimport { RootState } from '../../store/reducers';\nimport { GameState } from '../../store/game/types';\n\ninterface OwnProps {\n  playerId: string,\n};\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps) => {\n  const game = state.game.gameState as GameState;\n  const player = game.players[ownProps.playerId];\n  return {\n    name: player.name,\n    avatar: player.avatar,\n  };\n}\nexport default connect(mapStateToProps)(ConceptEntryCard);\n","import React, { FunctionComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport useStyles from './EntryChoicePhase.styles';\nimport Emoji from '../Emoji';\nimport DoodleEntryCard from '../DoodleEntryCard';\nimport ConceptEntryCard from '../ConceptEntryCard';\nimport { Entry, DrawingEntry } from '../../store/game/types';\n\ntype Props = {\n  entries: Entry[],\n  concept: string,\n  stackPlayerName: string,\n  currentPlayerChooses: boolean,\n  chosenPlayerName?: string,\n  acknowledged: boolean,\n  onChooseEntry: (playerId: string) => void,\n  onAcknowledge: () => void,\n};\n\nconst EntryChoicePhase: FunctionComponent<Props> = ({\n  entries,\n  concept,\n  stackPlayerName,\n  currentPlayerChooses,\n  chosenPlayerName = '',\n  acknowledged,\n  onChooseEntry,\n  onAcknowledge,\n}) => {\n  const classes = useStyles();\n\n  const getMessage = () => {\n    if (currentPlayerChooses) {\n      return chosenPlayerName\n        ? `You chose the entry by ${chosenPlayerName} for \"${concept}\"!`\n        : `Choose your favorite entry for \"${concept}\"`;\n    }\n\n    return chosenPlayerName\n      ? `${stackPlayerName} chose the entry by ${chosenPlayerName} for \"${concept}\"!`\n      : `${stackPlayerName} is choosing their favorite entry for \"${concept}\"`;\n  }\n\n  const firstEntry = entries[0];\n  const drawingEntry = firstEntry.data as DrawingEntry;\n  const otherEntries = entries.slice(1);\n\n  return (\n    <Grid item xs={12}>\n      <Grid container direction=\"column\" spacing={4}>\n        <Grid item xs={12}>\n          <Paper elevation={1} variant=\"outlined\" className={classes.paper}>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item xs={12}>\n                <Typography>{getMessage()}</Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <img\n                  className={classes.img}\n                  src={drawingEntry.drawing}\n                  alt={`Initial drawing by ${stackPlayerName}`}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!chosenPlayerName || acknowledged}\n                  onClick={onAcknowledge}\n                >\n                  <Emoji symbol=\"👏\"/>\n                  <span>Next</span>\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n          {\n            otherEntries.map((entry) => {\n              const entryCard = entry.data.type === 'drawing'\n                ? (\n                  <DoodleEntryCard\n                    playerId={entry.author}\n                    image={entry.data.drawing}\n                    onClick={\n                      currentPlayerChooses\n                        ? () => onChooseEntry(entry.author)\n                        : undefined\n                    }\n                  />\n                )\n                : (\n                  <ConceptEntryCard\n                    playerId={entry.author}\n                    concept={entry.data.concept}\n                    onClick={\n                      currentPlayerChooses\n                        ? () => onChooseEntry(entry.author)\n                        : undefined\n                    }\n                  />\n                );\n              return (\n                <Grid item xs={12}>\n                  <Paper elevation={1} variant=\"outlined\" className={classes.paper}>\n                    {entryCard}\n                  </Paper>\n                </Grid>\n              );\n            }\n          )\n        }\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default EntryChoicePhase;\n","import { connect } from 'react-redux';\n\nimport EntryChoicePhase from './EntryChoicePhase';\nimport { AppDispatch } from '../../store';\nimport { RootState } from '../../store/reducers';\nimport {\n  GameState,\n  EntryChoicePhase as EntryChoicePhaseType,\n} from '../../store/game/types';\nimport {\n  chooseEntry,\n  acknowledgeWinner,\n} from '../../store/game';\n\nconst mapStateToProps = (state: RootState) => {\n  const game = state.game.gameState as GameState;\n  const phase = game.round.phase as EntryChoicePhaseType;\n  const stackPlayerId = game.round.order[phase.index];\n  const stackPlayerName = game.players[stackPlayerId].name;\n  const concept = game.round.concepts[stackPlayerId];\n  const stack = game.round.stacks[stackPlayerId];\n  const playerId = state.game.player as string;\n  const currentPlayerChooses = playerId === stackPlayerId;\n  const chosenPlayerId = stack.chosen || state.game.chosenEntry;\n  const chosenPlayerName = chosenPlayerId\n    ? game.players[chosenPlayerId].name\n    : undefined;\n  const entries = stack.entries;\n  const acknowledged = state.game.acknowledgedWinner || !!phase.acknowledgeBy.includes(playerId);\n\n  return {\n    stackPlayerName,\n    concept,\n    currentPlayerChooses,\n    chosenPlayerName,\n    entries,\n    acknowledged,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onChooseEntry: (targetPlayer: string) => dispatch(chooseEntry(targetPlayer)),\n  onAcknowledge: () => dispatch(acknowledgeWinner()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(EntryChoicePhase);\n","import { useEffect, EffectCallback } from 'react';\n\nconst useMountEffect = (fn: EffectCallback) => useEffect(fn, [])\n\nexport default useMountEffect;\n","import React, { FunctionComponent } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport InitialPhase from '../InitialPhase';\nimport ConceptChoicePhase from '../ConceptChoicePhase';\nimport CreateEntryPhase from '../CreateEntryPhase';\nimport EntryChoicePhase from '../EntryChoicePhase';\nimport useMountEffect from '../../utils/useMountEffect';\n\ntype Props = {\n  connected: boolean,\n  phaseName: string,\n  connect: () => void,\n}\n\nconst Game: FunctionComponent<Props> = ({\n  connected,\n  phaseName,\n  connect,\n}) => {\n  useMountEffect(() => {\n    connect();\n  });\n\n  if (!connected) {\n    return <Typography>Connecting</Typography>;\n  }\n\n  switch (phaseName) {\n    case 'initial':\n      return <InitialPhase />;\n    case 'conceptChoice':\n      return <ConceptChoicePhase />;\n    case 'createEntry':\n      return <CreateEntryPhase />;\n    case 'entryChoice':\n      return <EntryChoicePhase />\n    default:\n      return <Typography>Unknown phase</Typography>\n  }\n};\n\nexport default Game;\n","import { connect } from 'react-redux';\n\nimport Game from './Game';\nimport { AppDispatch } from '../../store';\nimport { connectToGameChannel } from '../../store/game';\nimport { RootState } from '../../store/reducers';\n\nconst mapStateToProps = (state: RootState) => {\n  if (!state.game.gameState) {\n    return {\n      connected: false,\n      phaseName: '',\n    };\n  }\n\n  return {\n    connected: true,\n    phaseName: state.game.gameState.round.phase.name,\n  };\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  connect: () => dispatch(connectToGameChannel()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Game);\n","import React, {\n  useState,\n  FunctionComponent,\n} from 'react';\nimport { useParams, withRouter, RouteComponentProps } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Emoji from '../Emoji';\nimport { JoinGameParams } from '../../store/game/types';\nimport MainContent from '../MainContent';\n\ninterface Props extends RouteComponentProps<any> {\n  joinGame: (params: JoinGameParams) => void,\n}\n\nconst JoinMenu: FunctionComponent<Props> = ({\n  joinGame,\n  history,\n}) => {\n  const [name, setName] = useState('');\n  const handleNameChange = (\n    (event:React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\n  );\n\n  const { code } = useParams();\n  const handleGoClicked = () => joinGame({\n    name,\n    code: code as string,\n    goToGame: (code: string) => history.push(`/game/${code}`),\n  });\n\n  const hasName = name.length > 0;\n\n  return (\n    <MainContent>\n      <Grid item xs={12}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          value={name}\n          onChange={handleNameChange}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!hasName}\n          onClick={handleGoClicked}\n        >\n          <Emoji symbol=\"🙌\"/>\n          <span>Go!</span>\n        </Button>\n      </Grid>\n    </MainContent>\n  );\n};\n\nexport default withRouter(JoinMenu);\n","import JoinMenu from './JoinMenu';\nimport { connect } from 'react-redux';\nimport { AppDispatch } from '../../store';\nimport { joinGame } from '../../store/game';\nimport { JoinGameParams } from '../../store/game/types';\n\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  joinGame: (params: JoinGameParams) => {\n    dispatch(joinGame(params));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(JoinMenu);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawerButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport useStyles from './TopBar.styles';\n\ntype Props = {\n  onToggleDrawer: () => void,\n};\n\nconst TopBar: FunctionComponent<Props> = ({\n  onToggleDrawer,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar >\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={onToggleDrawer}\n          className={classes.drawerButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          doodle.io\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TopBar;\n","import { makeStyles } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, { FunctionComponent } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Avataaar from 'avataaars';\n\nimport Emoji from '../Emoji';\nimport pluralize from '../../utils/pluralize';\nimport useStyles from './PlayerListItem.styles';\n\ntype PlayerState = 'Ready' | 'Thinking' | 'Guessing' | 'Drawing';\n\ntype Avatar = {\n  topType: string,\n  accessoriesType: string,\n  hairColor: string,\n  facialHairType: string,\n  clotheType: string,\n  clotheColor: string,\n  eyeType: string,\n  eyebrowType: string,\n  mouthType: string,\n  skinColor: string,\n}\n\ntype Props = {\n  name: string,\n  avatar: Avatar,\n  points: number,\n  state?: PlayerState,\n}\n\nconst statusEmojis = {\n  Ready: '✅',\n  Thinking: '🤔',\n  Guessing: '🕵️‍♂️',\n  Drawing: '✏️',\n}\n\nconst PlayerItem: FunctionComponent<Props> = ({\n  name,\n  avatar,\n  points,\n  state,\n}) => {\n  const classes = useStyles();\n  return (\n    <ListItem divider>\n      <ListItemAvatar>\n        <Avatar variant=\"rounded\" alt={name} className={classes.avatar}>\n          <Avataaar\n            avatarStyle=\"Circle\"\n            topType={avatar.topType}\n            accessoriesType={avatar.accessoriesType}\n            hairColor={avatar.hairColor}\n            facialHairType={avatar.facialHairType}\n            clotheType={avatar.clotheType}\n            clotheColor={avatar.clotheColor}\n            eyeType={avatar.eyeType}\n            eyebrowType={avatar.eyebrowType}\n            mouthType={avatar.mouthType}\n            skinColor={avatar.skinColor}\n          />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={name}\n        secondary={`${points} ${pluralize('point', 'points', points)}`}\n      />\n      {\n        state && (\n          <ListItemSecondaryAction>\n            <Emoji symbol={statusEmojis[state]} />\n          </ListItemSecondaryAction>\n        )\n      }\n    </ListItem>\n  );\n};\n\nexport default PlayerItem;\n","import { connect } from 'react-redux';\nimport PlayerListItem from './PlayerListItem';\nimport { RootState } from '../../store/reducers';\nimport { selectors } from '../../store/game';\n\ntype Props = {\n  id: string\n}\n\nconst mapStateToProps = (state: RootState, ownProps: Props) => {\n  const player = selectors.player(state, ownProps.id);\n\n  return player;\n}\n\nexport default connect(mapStateToProps)(PlayerListItem);\n","import React, { FunctionComponent } from 'react';\nimport List from '@material-ui/core/List';\nimport PlayerListItem from '../PlayerListItem';\n\nexport type Props = {\n  playerIds: string[],\n}\n\nconst PlayerList: FunctionComponent<Props> = ({\n  playerIds,\n}) => (\n  <List>\n    {\n      playerIds.map(id => <PlayerListItem key={id} id={id} />)\n    }\n  </List>\n);\n\nexport default PlayerList;\n","import { connect } from 'react-redux';\nimport PlayerList from './PlayerList';\nimport { RootState } from '../../store/reducers';\nimport { selectors } from '../../store/game';\n\nconst mapStateToProps = (state: RootState) => ({\n  playerIds: selectors.playerIds(state),\n});\n\nexport default connect(mapStateToProps)(PlayerList);\n","import React, { FunctionComponent } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport useStyles from './SideBar.styles';\nimport PlayerList from '../PlayerList';\n\ntype Props = {\n  drawerOpen: boolean,\n  onToggleDrawer: () => void,\n}\n\nconst SideBar: FunctionComponent<Props> = ({\n  drawerOpen,\n  onToggleDrawer,\n}) => {\n  const classes = useStyles();\n\n  const drawer = (\n    <React.Fragment>\n      <Toolbar />\n      <div className={classes.drawerContainer}>\n        <PlayerList />\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <React.Fragment>\n      <Hidden smUp implementation=\"css\">\n        <Drawer\n          variant=\"temporary\"\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          open={drawerOpen}\n          onClose={onToggleDrawer}\n          ModalProps={{\n            keepMounted: true,\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          variant=\"permanent\"\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n    </React.Fragment>\n  );\n};\n\nexport default SideBar;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import React, {\n  useState,\n  FunctionComponent,\n} from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\n\nimport Menu from '../Menu';\nimport Game from '../Game';\nimport JoinMenu from '../JoinMenu';\nimport TopBar from '../TopBar';\nimport SideBar from '../SideBar';\nimport useStyles from './App.styles';\nimport useMountEffect from '../../utils/useMountEffect';\n\ntype Props = {\n  playerName?: string,\n  connect: () => void,\n}\n\nconst App: FunctionComponent<Props> = ({\n  playerName,\n  connect,\n}) => {\n  useMountEffect(() => {\n    connect();\n  });\n\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const onToggleDrawer = () => setDrawerOpen(!drawerOpen);\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <TopBar onToggleDrawer={onToggleDrawer} />\n      <SideBar\n        drawerOpen={drawerOpen}\n        onToggleDrawer={onToggleDrawer}\n      />\n      <div className={classes.content}>\n        <Toolbar />\n        <Grid container justify=\"center\">\n          <HashRouter>\n            <Switch>\n              <Route exact path=\"/\">\n                <Menu />\n              </Route>\n              <Route exact path=\"/game/:code\">\n                {\n                  playerName\n                    ? <Game />\n                    : <JoinMenu />\n                }\n              </Route>\n            </Switch>\n          </HashRouter>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from 'react-redux';\n\nimport App from './App';\nimport { AppDispatch } from '../../store';\nimport { connect as connectToSocket } from '../../store/socket';\nimport { subscribe } from '../../store/game';\nimport { RootState } from '../../store/reducers';\n\nconst mapStateToProps = (state: RootState) => ({\n  playerName: state.game.config.name,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  connect: () => {\n    dispatch(connectToSocket((socket) => {\n      subscribe(dispatch, socket);\n    }));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const LIVE_SERVER_SOCKET = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:3001'\n  : 'https://api.doodle.saltares.com';\n","import { combineReducers } from '@reduxjs/toolkit';\nimport socket from './socket';\nimport game from './game';\n\nconst rootReducer = combineReducers({\n  socket,\n  game,\n});\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppGetState = typeof store.getState;\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport  CssBaseline from '@material-ui/core/CssBaseline';\n\nimport App from './components/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}